{"id": "seed_task_0", "name": "AS18298 Real-Time BGP Data Analysis", "instruction": "Collect BGP update data for AS18298 over a specific collection period. Record prefix announcements and withdrawals during this period. Aggregate and visualize the collected data.", "instances": [{"input": "Collection Period: 72000 seconds\nTarget AS: 18298", "output": "import pybgpstream\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport time\n\ncollection_period = 72000\ntarget_as = \"18298\"\n\nprefix_announcements_df = pd.DataFrame(columns=['Time', 'Prefix', 'Count'])\nwithdrawals_df = pd.DataFrame(columns=['Time', 'Prefix', 'Count'])\n\nstream = pybgpstream.BGPStream(\n    project=\"ris-live\",\n    record_type=\"updates\",\n)\n\nstart_time = time.time()\n\nfor rec in stream.records():\n    if collection_period < time.time() - start_time:\n        print(\"Collection period ended. Processing data...\")\n        break\n\n    current_time = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(rec.time))\n    for elem in rec:\n        as_path = elem.fields.get('as-path', '').split()\n        prefix = elem.fields['prefix']\n\n        if target_as in as_path:\n            if elem.type == 'A':\n                if prefix in prefix_announcements_df['Prefix'].values:\n                    prefix_announcements_df.loc[prefix_announcements_df['Prefix'] == prefix, 'Count'] += 1\n                else:\n                    new_row = pd.DataFrame({'Time': [current_time], 'Prefix': [elem.fields['prefix']], 'Count': [1]})\n                    prefix_announcements_df = pd.concat([prefix_announcements_df, new_row], ignore_index=True)\n            elif elem.type == 'W':\n                if prefix in withdrawals_df['Prefix'].values:\n                    withdrawals_df.loc[withdrawals_df['Prefix'] == prefix, 'Count'] += 1\n                else:\n                    new_row = pd.DataFrame({'Time': [current_time], 'Prefix': [elem.fields['prefix']], 'Count': [1]})\n                    withdrawals_df = pd.concat([withdrawals_df, new_row], ignore_index=True)\n\nprefix_announcements_df = prefix_announcements_df.groupby(['Prefix']).size().reset_index(name='Counts')\nwithdrawals_df = withdrawals_df.groupby(['Prefix']).size().reset_index(name='Counts')\n\ndef plot_data(df, title):\n    if not df.empty:\n        plt.figure(figsize=(10, 5))\n        plt.bar(df['Prefix'], df['Counts'], align='center')\n        plt.xticks(rotation=90)\n        plt.title(title)\n        plt.show()\n    else:\n        print(f\"No data to display for {title}\")\n\nplot_data(prefix_announcements_df, f\"Prefix Announcements for AS{target_as} (Collected Data)\")\nplot_data(withdrawals_df, f\"Withdrawals for AS{target_as} (Collected Data)\")"}], "is_classification": false}
{"id": "seed_task_1", "name": "BGP Data Analysis for Prefix 41.221.215.0/24", "instruction": "Collect BGP update data for the target prefix (41.221.215.0/24) over a specified collection period of 900 seconds (15 minutes). During each 5-minute interval of the collection period, record prefix announcements and withdrawals for the target prefix. For each interval, plot the top 10 AS Paths with the most announcements for the prefix during the last 5 minutes of that interval. Repeat this process until the total collection period is reached.", "instances": [{"input": "Target Prefix: 41.221.215.0/24\nTotal Collection Period: 900 seconds (15 minutes)", "output": "import pybgpstream\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport threading\nimport time\ntarget_prefix = \"41.221.215.0/24\"\nprefix_announcements_df = pd.DataFrame(columns=['Time', 'AS Path', 'Count'])\nwithdrawals_df = pd.DataFrame(columns=['Time', 'AS Path', 'Count'])\ndef process_bgp_data(remaining_time):\n    global prefix_announcements_df\n    global withdrawals_df\n\n    stream = pybgpstream.BGPStream(\n        project=\"ris-live\",\n        record_type=\"updates\",\n    )\n\n    start_time = time.time()\n\n    for rec in stream.records():\n        current_time = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(rec.time))\n        if 300 < time.time() - start_time:\n            print(\"Collection period ended. Processing data...\")\n            break\n        for elem in rec:\n            as_path = elem.fields.get('as-path', '')\n            prefix = elem.fields['prefix']\n            if prefix == target_prefix:\n                if elem.type == 'A':\n                    if as_path in prefix_announcements_df['AS Path'].values:\n                        prefix_announcements_df.loc[prefix_announcements_df['AS Path'] == as_path, 'Count'] += 1\n                    else:\n                        new_row = pd.DataFrame({'Time': [current_time], 'AS Path': [as_path], 'Count': [1]})\n                        prefix_announcements_df = pd.concat([prefix_announcements_df, new_row], ignore_index=True)\n\n    plot_data(prefix_announcements_df, f\"Top 10 Announcements for Prefix {target_prefix} (Last 5 Minutes)\")\n\n    prefix_announcements_df = prefix_announcements_df[0:0]\n\n    remaining_time -= 300\n    print(f\"remaining_time: {remaining_time}\")\n    if remaining_time > 0:\n        threading.Timer(0, process_bgp_data, args=(remaining_time,)).start()\n\ndef plot_data(df, title):\n    if not df.empty:\n        grouped_df = df.groupby('AS Path').sum().reset_index().sort_values(by='Count', ascending=False).head(10)\n        plt.figure(figsize=(10, 5))\n        plt.bar(grouped_df['AS Path'], grouped_df['Count'], align='center')\n        plt.xticks(rotation=90)\n        plt.title(title)\n        plt.show()\n    else:\n        print(f\"No data to display for {title}\")\n\ntotal_collection_period = 60 * 15\nprocess_bgp_data(total_collection_period)"}], "is_classification": false}
{"id": "seed_task_2", "name": "BGP Data Analysis for Prefix 41.221.215.0/24", "instruction": "Collect BGP update data for the target prefix (41.221.215.0/24) over a specified short collection period of 180 seconds (3 minutes). During each 1-minute interval of the collection period, record prefix announcements and withdrawals for the target prefix. For each interval, plot the top 10 AS Paths with the most announcements and withdrawals combined for the prefix during the last 1 minute of that interval. Repeat this process until the total collection period is reached.", "instances": [{"input": "Target Prefix: 41.221.215.0/24\nTotal Collection Period: 180 seconds (3 minutes)", "output": "import pybgpstream\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport threading\nimport time\ntarget_prefix = \"41.221.215.0/24\"\nbgp_events_df = pd.DataFrame(columns=['Time', 'AS Path', 'Announcements', 'Withdrawals'])\n\ndef process_bgp_data(remaining_time):\n    global bgp_events_df\n    stream = pybgpstream.BGPStream(\n        project=\"ris-live\",\n        record_type=\"updates\",\n    )\n    start_time = time.time()\n    for rec in stream.records():\n        current_time = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(rec.time))\n        if 60 < time.time() - start_time:\n            print(\"Collection period ended. Processing data...\")\n            break\n        for elem in rec:\n            as_path = elem.fields.get('as-path', '')\n            prefix = elem.fields['prefix']\n            if prefix == target_prefix:\n                bgp_events_df = update_bgp_events(bgp_events_df, current_time, as_path, elem.type)\n\n    plot_data(bgp_events_df, f\"BGP Events for Prefix {target_prefix} (Last 1 Minute)\")\n\n    remaining_time -= 60\n    print(f\"remaining_time: {remaining_time}\")\n    if remaining_time > 0:\n        threading.Timer(0, process_bgp_data, args=(remaining_time,)).start()\n\ndef update_bgp_events(df, current_time, as_path, event_type):\n    if df[df['AS Path'] == as_path].empty:\n        new_row = {'Time': current_time, 'AS Path': as_path, 'Announcements': 0, 'Withdrawals': 0}\n        df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)\n    if event_type == 'A':\n        df.loc[df['AS Path'] == as_path, 'Announcements'] += 1\n    elif event_type == 'W':\n        df.loc[df['AS Path'] == as_path, 'Withdrawals'] += 1\n    return df\n\ndef plot_data(df, title):\n    if not df.empty:\n        df_grouped = df.groupby('AS Path').agg({'Announcements': 'sum', 'Withdrawals': 'sum'})\n        df_grouped['Total'] = df_grouped['Announcements'] + df_grouped['Withdrawals']\n        df_grouped = df_grouped.sort_values(by='Total', ascending=False).head(10).reset_index()\n        plt.figure(figsize=(15, 5))\n        plt.bar(df_grouped['AS Path'], df_grouped['Announcements'], align='center', color='blue', label='Announcements')\n        plt.bar(df_grouped['AS Path'], df_grouped['Withdrawals'], align='center', color='red', bottom=df_grouped['Announcements'], label='Withdrawals')\n        plt.xticks(rotation=90)\n        plt.title(title)\n        plt.legend()\n        plt.show()\n    else:\n        print(f\"No data to display for {title}\")\n\ntotal_collection_period = 60 * 3\nprocess_bgp_data(total_collection_period)"}], "is_classification": false}
{"id": "seed_task_3", "name": "BGP Data Analysis for Prefix 41.221.215.0/24", "instruction": "Collect BGP update data for the target prefix (41.221.215.0/24) over a specified short collection period of 180 seconds (3 minutes). During each 1-minute interval of the collection period, record prefix announcements and withdrawals for the target prefix. For each interval, plot the top 10 AS Paths with the most announcements for the prefix during the last 1 minute of that interval. Repeat this process until the total collection period is reached. Additionally, keep track of the total withdrawals observed during the collection.", "instances": [{"input": "Target Prefix: 41.221.215.0/24\nTotal Collection Period: 180 seconds (3 minutes)", "output": "import pybgpstream\nimport pandas as pd\nimport threading\nimport time\ntarget_prefix = \"41.221.215.0/24\"\nbgp_announcements_df = pd.DataFrame(columns=['Time', 'AS Path', 'Count'])\ntotal_withdrawals = 0\ndef process_bgp_data(remaining_time):\n    global bgp_announcements_df, total_withdrawals\n    stream = pybgpstream.BGPStream(\n        project=\"ris-live\",\n        record_type=\"updates\",\n    )\n    start_time = time.time()\n    for rec in stream.records():\n        current_time = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(rec.time))\n        if 60 < time.time() - start_time:\n            break\n        for elem in rec:\n            prefix = elem.fields['prefix']\n            if prefix == target_prefix:\n                if elem.type == 'A':\n                    as_path = elem.fields.get('as-path', '')\n                    bgp_announcements_df = update_announcements(bgp_announcements_df, current_time, as_path)\n                elif elem.type == 'W':\n                    total_withdrawals += 1\n    remaining_time -= 60\n    if remaining_time > 0:\n        threading.Timer(0, process_bgp_data, args=(remaining_time,)).start()\n    else:\n        print_summary(bgp_announcements_df, total_withdrawals)\ndef update_announcements(df, current_time, as_path):\n    if df[df['AS Path'] == as_path].empty:\n        new_row = {'Time': current_time, 'AS Path': as_path, 'Count': 1}\n        df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)\n    else:\n        df.loc[df['AS Path'] == as_path, 'Count'] += 1\n    return df\ndef print_summary(df, withdrawals):\n    if not df.empty:\n        total_announcements = df['Count'].sum()\n        print(f\"Total Announcements: {total_announcements}\")\n        print(f\"Total Withdrawals: {withdrawals}\")\n        top_as_paths = df.groupby('AS Path')['Count'].sum().sort_values(ascending=False).head(10)\n        print(\"Top 10 AS Paths by Announcements:\")\n        print(top_as_paths)\n    else:\n        print(\"No announcements data to display.\")\n        print(f\"Total Withdrawals: {withdrawals}\")\ntotal_collection_period = 60 * 3\nprocess_bgp_data(total_collection_period)"}], "is_classification": false}
