{"id": "seed_task_0", "name": "Processing PCAP Data with Python", "instruction": "Given a n3.pcap file containing network traffic data, create a Python script to process the PCAP. The script should extract the source IP, destination IP, source port, destination port, and the raw payload data for each packet in the PCAP. Store this data in a pandas DataFrame and display it.", "instances": [{"input": "The directory to the pcap file /home/user/5G_LLM/5G_data/n3.pcap","output": "import pandas as pd\nfrom scapy.all import *\n\n# Specify the PCAP file path\npcap_file = '/home/dnlab/Data-B/5G_LLM/n3_example.pcap'\n\ntry:\n    packets = rdpcap(pcap_file)  # Read the PCAP file\n    print(f\"Total packets in the capture: {len(packets)}\\n\")\n\n    # Create a list to store packet data\n    packet_data = []\n\n    for packet in packets:\n        src_ip, dst_ip, src_port, dst_port, raw_data = '', '', '', '', ''\n        \n        if IP in packet:\n            # Extract IP information\n            src_ip = packet[IP].src\n            dst_ip = packet[IP].dst\n\n        if TCP in packet:\n            # Extract TCP information\n            src_port = packet[TCP].sport\n            dst_port = packet[TCP].dport\n\n        if Raw in packet:\n            # Extract and append raw data (payload)\n            raw_data = packet[Raw].load\n        packet_data.append([src_ip, dst_ip, src_port, dst_port, raw_data])\n    \n    # Create a DataFrame from the packet data\n    df = pd.DataFrame(packet_data, columns=['Source IP', 'Destination IP', 'Source Port', 'Destination Port', 'Raw Data'])\n    \n    # Display the DataFrame\n    display(df)\n\nexcept Exception as e:\n    print(f\"An error occurred: {str(e)}\")"}],"is_classification": false}
{"id": "seed_task_1", "name": "5G Packet Traffic Analysis to DataFrame", "instruction": "Generate a Python script using the Scapy library to analyze 'traffic.pcap'. Extract the timestamps, source and destination IPs, and protocol types from each packet, then use the pandas library to arrange this data into a DataFrame and save it as 'traffic.csv'.", "instances": [{"input": "Location of pcap file: /path/to/traffic.pcap","output": "import pandas as pd\nfrom scapy.all import *\n\n# Load the pcap file\npackets = rdpcap('/path/to/traffic.pcap')\n\n# Prepare the data for the DataFrame\ntraffic_data = [{\n    'Timestamp': packet.time,\n    'Source IP': packet[IP].src if IP in packet else 'No IP',\n    'Destination IP': packet[IP].dst if IP in packet else 'No IP',\n    'Protocol': packet.sprintf('%IP.proto%')\n} for packet in packets]\n\n# Create and save the DataFrame\ndf = pd.DataFrame(traffic_data)\ndf.to_csv('traffic.csv', index=False)"}],"is_classification": false}
{"id": "seed_task_2", "name": "Packet Timing Analysis", "instruction": "Generate a Python script that processes 'timing_info.pcap' with Scapy to compute inter-arrival times of packets and outputs the results as a list called 'timing_results'?", "instances": [{"input": "Path to pcap file: /analysis/timing_info.pcap", "output": "from scapy.all import *\n\n# Read the pcap file\npackets = rdpcap('/analysis/timing_info.pcap')\n\n# Calculate inter-arrival times\ninter_arrival_times = [packets[i].time - packets[i - 1].time for i in range(1, len(packets))]\n\n# Output the results\ntiming_results = inter_arrival_times"}],"is_classification": false}
{"id": "seed_task_3", "name": "PCAP Packet Analysis", "instruction": "Create a Python script that reads and analyzes a PCAP file to extract packet information, including timestamps, source/destination IP addresses, ports, length, and protocol. Apply filters to separate TCP and UDP packets if they exist in the PCAP file.", "instances": [{"input": "Path to PCAP file: /home/dnlab/Data-B/5G_LLM/5G_data/n3_example.pcap", "output": "import pandas as pd\nfrom scapy.all import *\n# Load the PCAP file\ndef load_pcap(file_path):\n    return rdpcap(file_path)\n# Extract packet information\ndef extract_packet_info(packets):\n    packet_data = []\n    for packet in packets:\n        timestamp = packet.time\n        length = len(packet)\n        src_ip = packet[IP].src if IP in packet else None\n        dst_ip = packet[IP].dst if IP in packet else None\n        proto = packet[IP].proto if IP in packet else None\n        src_port = packet[TCP].sport if TCP in packet else None\n        dst_port = packet[TCP].dport if TCP in packet else None\n        packet_data.append([timestamp, src_ip, dst_ip, src_port, dst_port, length, proto])\n    return packet_data\n# Convert data to DataFrame\ndef to_dataframe(packet_data):\n    return pd.DataFrame(packet_data, columns=['Timestamp', 'Source IP', 'Destination IP', 'Source Port', 'Destination Port', 'Length', 'Protocol'])\n# Filter data based on criteria\ndef filter_data(df):\n    if 6 in df['Protocol'].unique():\n        tcp_packets = df[df['Protocol'] == 6]\n    else:\n        tcp_packets = None\n    if 17 in df['Protocol'].unique():\n        udp_packets = df[df['Protocol'] == 17]\n    else:\n        udp_packets = None\n    return tcp_packets, udp_packets\n# Specify the PCAP file path\npcap_file = '/home/dnlab/Data-B/5G_LLM/5G_data/n3_example.pcap'\npackets = load_pcap(pcap_file)\npacket_data = extract_packet_info(packets)\ndf = to_dataframe(packet_data)\ntcp_packets, udp_packets = filter_data(df)\nif tcp_packets is not None:\n    print('TCP Packets:\\n', tcp_packets.head())\nelse:\n    print('No TCP packets found.')\nif udp_packets is not None:\n    print('UDP Packets:\\n', udp_packets.head())\nelse:\n    print('No UDP packets found.')"}],"is_classification": false}
{"id": "seed_task_4", "name": "5G Network Performance Metrics", "instruction": "Write a Python function that reads 'network_performance.pcap' using Scapy, computes the average packet size, and the frequency of packet sizes, then prints these metrics.", "instances": [{"input": "PCAP file location: /net/performance/network_performance.pcap", "output": "from scapy.all import *\nfrom collections import Counter\n\n# Read pcap file\npackets = rdpcap('/net/performance/network_performance.pcap')\n\n# Compute average packet size\navg_size = sum(len(pkt) for pkt in packets) / len(packets)\n\n# Compute packet size frequency\nsize_frequency = Counter([len(pkt) for pkt in packets])\n\n# Print metrics\nprint(f'Average Packet Size: {avg_size} bytes')\nprint('Packet Size Frequency:', dict(size_frequency))"}],"is_classification": false}
{"id": "seed_task_5", "name": "5G Packet Timing Analysis", "instruction": "Create a Python script that reads 'timing_capture.pcap' using Scapy, computes the time intervals between packets, and displays the results as a DataFrame.", "instances": [{"input": "PCAP file location: timing_capture.pcap", "output": "import pandas as pd\nfrom scapy.all import *\n\n# Specify the PCAP file path\npcap_file = 'timing_capture.pcap'\n\ntry:\n    packets = rdpcap(pcap_file)  # Read the PCAP file\n    print(f\"Total packets in the capture: {len(packets)}\\n\")\n\n    # Create a list to store packet timing data\n    packet_timings = []\n\n    prev_timestamp = None\n\n    for packet in packets:\n        current_timestamp = packet.time\n        if prev_timestamp is not None:\n            time_interval = current_timestamp - prev_timestamp\n            packet_timings.append(time_interval)\n        prev_timestamp = current_timestamp\n\n    # Create a DataFrame from the packet timing data\n    df = pd.DataFrame(packet_timings, columns=['Time Interval (s)'])\n\n    # Display the DataFrame\n    display(df)\n\nexcept Exception as e:\n    print(f\"An error occurred: {str(e)}\")"}],"is_classification": false}
{"id": "seed_task_6", "name": "Network Performance Analysis", "instruction": "Create a Python script that reads 'network_performance.pcap' using Scapy, computes network performance metrics including packet loss rate, throughput, and latency, and prints these metrics.", "instances": [{"input": "PCAP file location: network_performance.pcap", "output": "from scapy.all import *\n\npcap_file = 'network_performance.pcap'\n\ntry:\n    packets = rdpcap(pcap_file)  # Read the PCAP file\n    print(f\"Total packets in the capture: {len(packets)}\\n\")\n\n    total_packets = len(packets)\n    lost_packets = sum(1 for packet in packets if ICMP in packet and packet[ICMP].type == 8)  # Count ICMP Echo Requests as lost packets\n\n    packet_loss_rate = (lost_packets / total_packets) * 100\n    throughput = total_packets / (packets[-1].time - packets[0].time)  # Packets per second\n    latency = (packets[-1].time - packets[0].time) / total_packets\n\n    print(f\"Packet Loss Rate: {packet_loss_rate:.2f}%\")\n    print(f\"Throughput: {throughput:.2f} packets/second\")\n    print(f\"Latency: {latency:.6f} seconds per packet\")\n\nexcept Exception as e:\n    print(f\"An error occurred: {str(e)}\")"}],"is_classification": false}
{"id": "seed_task_7", "name": "PCAP Security Analysis", "instruction": "Create a Python script that performs security analysis on a PCAP file, including analyzing packet contents for malware signatures, intrusion attempts, and unusual behavior. Display the security analysis results as well as a DataFrame containing packet details.", "instances": [{"input": "Path to PCAP file: /home/dnlab/Data-B/5G_LLM/5G_data/n3_example.pcap", "output": "import pandas as pd\nfrom scapy.all import *\nimport multiprocessing\nimport logging\n\n# Function to perform security analysis on a packet\n\ndef analyze_packet(packet, security_analysis):\n    src_ip, dst_ip, src_port, dst_port, proto, length, payload = '', '', '', '', '', len(packet), b''\n\n    if IP in packet:\n        src_ip = packet[IP].src\n        dst_ip = packet[IP].dst\n        proto = packet[IP].proto\n\n        if TCP in packet:\n            src_port = packet[TCP].sport\n            dst_port = packet[TCP].dport\n        elif UDP in packet:\n            src_port = packet[UDP].sport\n            dst_port = packet[UDP].dport\n\n        if Raw in packet:\n            payload = packet[Raw].load\n\n    # Example security analysis rules\n    if b\"malware_signature\" in payload.lower():\n        security_analysis['Malware Detected'] += 1\n    elif src_port == 22 and b\"password\" in payload.lower():\n        security_analysis['Intrusion Attempts'] += 1\n    elif len(payload) > 10000:\n        security_analysis['Unusual Behavior'] += 1\n    else:\n        security_analysis['Normal Traffic'] += 1\n\n    return [src_ip, dst_ip, src_port, dst_port, proto, length, payload]\n\n# Function to process packets in batch\n\ndef process_packets(packets, security_analysis):\n    packet_data = []\n    for packet in packets:\n        packet_info = analyze_packet(packet, security_analysis)\n        packet_data.append(packet_info)\n    return packet_data\n\n# Main function to read and analyze pcap file\n\ndef analyze_pcap(pcap_file):\n    try:\n        packets = rdpcap(pcap_file)\n        logging.info(f\"Total packets in the capture: {len(packets)}\")\n\n        # Initialize security analysis results dictionary\n        manager = multiprocessing.Manager()\n        security_analysis = manager.dict({\n            'Malware Detected': 0,\n            'Intrusion Attempts': 0,\n            'Unusual Behavior': 0,\n            'Normal Traffic': 0\n        })\n\n        # Using multiprocessing to process packets in parallel\n        pool = multiprocessing.Pool(processes=multiprocessing.cpu_count())\n        results = pool.starmap(process_packets, [(packets[i::multiprocessing.cpu_count()], security_analysis) for i in range(multiprocessing.cpu_count())])\n        pool.close()\n        pool.join()\n\n        # Flatten the list of results\n        packet_data = [item for sublist in results for item in sublist]\n\n        # Create a DataFrame from the packet data\n        df = pd.DataFrame(packet_data, columns=['Source IP', 'Destination IP', 'Source Port', 'Destination Port', 'Protocol', 'Length', 'Payload'])\n\n        # Display security analysis results\n        logging.info(\"Security Analysis Results:\")\n        for category, count in security_analysis.items():\n            logging.info(f\"{category}: {count} incidents\")\n\n        return df\n\n    except Exception as e:\n        logging.error(f\"An error occurred: {str(e)}\")\n        return None\n\n# Specify the PCAP file path\npcap_file = '/home/dnlab/Data-B/5G_LLM/5G_data/n3_example.pcap'\n\n# Set up logging\nlogging.basicConfig(level=logging.INFO)\n\n# Run the analysis\ndf_packets = analyze_pcap(pcap_file)\n\n# Optionally, display the DataFrame\nif df_packets is not None:\n    print(df_packets.head())"}],"is_classification": false}
{"id": "seed_task_8", "name": "5G QoS Parameters Analysis", "instruction": "Create a Python script that reads '5g_qos_parameters.pcap' using Scapy, extracts QoS parameters including latency, throughput, and jitter, and calculates and prints their average values.", "instances": [{"input": "PCAP file location: 5g_qos_parameters.pcap", "output": "from scapy.all import *\n\n# Specify the PCAP file path\npcap_file = '5g_qos_parameters.pcap'\n\ntry:\n    packets = rdpcap(pcap_file)  # Read the PCAP file\n    print(f\"Total packets in the capture: {len(packets)}\\n\")\n\n    # Initialize variables to store QoS parameters\n    latency_values = []\n    throughput_values = []\n    jitter_values = []\n\n    for packet in packets:\n        if '5GS QoS' in packet:\n            if '5GS QoS Latency' in packet:\n                latency = packet['5GS QoS Latency'].latency\n                latency_values.append(latency)\n            if '5GS QoS Throughput' in packet:\n                throughput = packet['5GS QoS Throughput'].throughput\n                throughput_values.append(throughput)\n            if '5GS QoS Jitter' in packet:\n                jitter = packet['5GS QoS Jitter'].jitter\n                jitter_values.append(jitter)\n\n    # Calculate average QoS metrics\n    avg_latency = sum(latency_values) / len(latency_values)\n    avg_throughput = sum(throughput_values) / len(throughput_values)\n    avg_jitter = sum(jitter_values) / len(jitter_values)\n\n    print(f\"Average Latency: {avg_latency} ms\")\n    print(f\"Average Throughput: {avg_throughput} Mbps\")\n    print(f\"Average Jitter: {avg_jitter} ms\")\n\nexcept Exception as e:\n    print(f\"An error occurred: {str(e)}\")"}],"is_classification": false}
{"id": "seed_task_9", "name": "Packet Loss Rate and RTT Analysis", "instruction": "Create a Python script that reads 'rtt_packet_loss.pcap' using Scapy, calculates and prints the packet loss rate and average Round-Trip Time (RTT) for ICMP packets.", "instances": [{"input": "PCAP file location: rtt_packet_loss.pcap", "output": "from scapy.all import *\n\n# Specify the PCAP file path\npcap_file = '/path/to/rtt_packet_loss.pcap'\n\ntry:\n    packets = rdpcap(pcap_file)  # Read the PCAP file\n\n    # Initialize variables for packet counting\n    total_packets = 0\n    lost_packets = 0\n\n    # Initialize variables for RTT calculation\n    rtt_sum = 0\n    rtt_count = 0\n\n    for packet in packets:\n        total_packets += 1\n\n        # Check for ICMP Echo Request and Echo Reply packets\n        if ICMP in packet and packet[ICMP].type == 8:  # ICMP Echo Request\n            icmp_id = packet[ICMP].id\n            icmp_seq = packet[ICMP].seq\n\n            # Search for corresponding Echo Reply packet\n            for reply_packet in packets:\n                if ICMP in reply_packet and reply_packet[ICMP].type == 0:  # ICMP Echo Reply\n                    if reply_packet[ICMP].id == icmp_id and reply_packet[ICMP].seq == icmp_seq:\n                        rtt = reply_packet.time - packet.time\n                        rtt_sum += rtt\n                        rtt_count += 1\n                        break\n            else:\n                lost_packets += 1\n\n    # Calculate packet loss rate\n    packet_loss_rate = (lost_packets / total_packets) * 100 if total_packets > 0 else 0\n\n    # Calculate average RTT\n    average_rtt = rtt_sum / rtt_count if rtt_count > 0 else 0\n\n    print(f\"Packet Loss Rate: {packet_loss_rate:.2f}%\")\n    print(f\"Average Round-Trip Time (RTT): {average_rtt:.6f} seconds\")\n\nexcept Exception as e:\n    print(f\"An error occurred: {str(e)}\")"}],"is_classification": false}
{"id": "seed_task_10", "name": "5G Anomaly Detection", "instruction": "Create a Python script that reads 'anomaly_traffic.pcap' using Scapy, detects potential anomalies based on specific conditions, and prints information about potential anomalies.", "instances": [{"input": "PCAP file location: anomaly_traffic.pcap", "output": "from scapy.all import *\n\n# Specify the PCAP file path\npcap_file = '/path/to/anomaly_traffic.pcap'\n\ntry:\n    packets = rdpcap(pcap_file)  # Read the PCAP file\n\n    # Create a list to store potential anomalies\n    anomalies = []\n\n    for packet in packets:\n        # Check for anomalies based on specific conditions (customize as needed)\n        if TCP in packet and packet[TCP].flags == \"A\":  # Example: Detecting TCP ACK-only packets\n            anomalies.append({\n                \"Timestamp\": packet.time,\n                \"Source IP\": packet[IP].src,\n                \"Destination IP\": packet[IP].dst,\n                \"Protocol\": \"TCP\",\n                \"Description\": \"Potential TCP ACK-only packet\"\n            })\n\n    # Print potential anomalies\n    print(\"Potential Anomalies:\")\n    for anomaly in anomalies:\n        print(f\"Timestamp: {anomaly['Timestamp']:.6f}, Source IP: {anomaly['Source IP']}, Destination IP: {anomaly['Destination IP']}, Protocol: {anomaly['Protocol']}, Description: {anomaly['Description']}\")\n\nexcept Exception as e:\n    print(f\"An error occurred: {str(e)}\")"}],"is_classification": false}
{"id": "seed_task_11", "name": "Packet Size Analysis", "instruction": "Create a Python script that reads 'packet_size_analysis.pcap' using Scapy, calculates and prints total packet count, total data volume, and packet size distribution statistics.", "instances": [{"input": "PCAP file location: packet_size_analysis.pcap", "output": "from scapy.all import *\nimport pandas as pd\n\n# Specify the PCAP file path\npcap_file = '/path/to/packet_size_analysis.pcap'\n\ntry:\n    packets = rdpcap(pcap_file)  # Read the PCAP file\n\n    # Initialize variables for statistics\n    total_packets = 0\n    total_data_volume = 0\n    packet_sizes = []\n\n    for packet in packets:\n        total_packets += 1\n\n        if Raw in packet:\n            # Calculate data volume by summing up payload lengths\n            total_data_volume += len(packet[Raw].load)\n\n            # Collect packet sizes\n            packet_sizes.append(len(packet[Raw].load))\n\n    # Calculate packet size distribution (e.g., percentiles, histograms)\n\n    # Calculate total data volume in megabytes\n    total_data_volume_mb = total_data_volume / (1024 * 1024)\n\n    print(f\"Total Packets: {total_packets}\")\n    print(f\"Total Data Volume: {total_data_volume_mb:.2f} MB\")\n    print(\"Packet Size Distribution:\")\n    print(pd.Series(packet_sizes).describe(percentiles=[0.25, 0.50, 0.75]))\n\nexcept Exception as e:\n    print(f\"An error occurred: {str(e)}\")"}],"is_classification": false}
{"id": "seed_task_12", "name": "PCAP Time Series Analysis and Visualization", "instruction": "Create a Python script that analyzes a PCAP file, extracts packet information, counts protocol occurrences, and visualizes packet arrival rate over time.", "instances": [{"input": "Path to PCAP file: /home/dnlab/Data-B/5G_LLM/5G_data/n3_example.pcap", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom scapy.all import *\n\n# Specify the PCAP file path\npcap_file = '/home/dnlab/Data-B/5G_LLM/5G_data/n3_example.pcap'\n\ntry:\n    packets = rdpcap(pcap_file)  # Read the PCAP file\n    print(f\"Total packets in the capture: {len(packets)}\\n\")\n\n    # Create a list to store packet data\n    packet_data = []\n\n    # Initialize protocol counters\n    protocol_counts = {}\n\n    # Initialize a list to store timestamps in milliseconds\n    timestamp_milliseconds = []\n\n    for packet in packets:\n        # Initialize fields to extract\n        timestamp = packet.time\n        timestamp_ms = int(timestamp * 1000)  # Convert timestamp to milliseconds\n        timestamp_milliseconds.append(timestamp_ms)  # Store timestamps in milliseconds\n        src_ip, dst_ip, src_port, dst_port, proto, length = '', '', '', '', '', len(packet)\n        src_mac, dst_mac, raw_data = '', '', ''\n\n        # 5G Protocol Stack\n        # Extract 5G protocol details as needed, e.g., NAS, RRC, GTP, etc.\n\n        # Ethernet Layer\n        if Ether in packet:\n            src_mac = packet[Ether].src\n            dst_mac = packet[Ether].dst\n\n        # IP Layer\n        if IP in packet:\n            src_ip = packet[IP].src\n            dst_ip = packet[IP].dst\n            proto = packet[IP].proto\n\n        # Transport Layer\n        if TCP in packet:\n            src_port = packet[TCP].sport\n            dst_port = packet[TCP].dport\n        elif UDP in packet:\n            src_port = packet[UDP].sport\n            dst_port = packet[UDP].dport\n\n        # Raw Payload\n        if Raw in packet:\n            raw_data = packet[Raw].load\n\n        packet_data.append([timestamp_ms, src_mac, dst_mac, src_ip, dst_ip, src_port, dst_port, proto, length, raw_data])\n\n        # Count occurrences of each protocol\n        if proto not in protocol_counts:\n            protocol_counts[proto] = 1\n        else:\n            protocol_counts[proto] += 1\n\n    # Create a DataFrame from the packet data\n    df = pd.DataFrame(packet_data, columns=['Timestamp (ms)', 'Source MAC', 'Destination MAC', 'Source IP', 'Destination IP', 'Source Port', 'Destination Port', 'Protocol', 'Length', 'Raw Data'])\n\n    # Display the DataFrame\n    display(df)\n\n    # Display protocol counts\n    print(\"\\nProtocol Counts:\")\n    for protocol, count in protocol_counts.items():\n        print(f\"{protocol}: {count} packets\")\n\n    # Time Series Analysis with timestamps in milliseconds\n    plt.figure(figsize=(12, 6))\n    plt.plot(timestamp_milliseconds, range(len(timestamp_milliseconds)), label='Packet Arrival Rate')\n    plt.title('Packet Arrival Rate Over Time')\n    plt.xlabel('Timestamp (ms)')\n    plt.ylabel('Packet Count')\n    plt.legend()\n    plt.grid(True)\n    plt.tight_layout()\n    plt.show()\n\nexcept Exception as e:\n    print(f\"An error occurred: {str(e)}\")"}],"is_classification": false}
{"id": "seed_task_13", "name": "PCAP Packet Length Analysis", "instruction": "Create a Python script that analyzes a PCAP file, calculates statistics for packet lengths (mean, median, and standard deviation), and visualizes the packet size distribution.", "instances": [{"input": "Path to PCAP file: /home/dnlab/Data-B/5G_LLM/5G_data/n3_example.pcap", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom scapy.all import *\n\n# Specify the PCAP file path\npcap_file = '/home/dnlab/Data-B/5G_LLM/5G_data/n3_example.pcap'\n\ntry:\n    packets = rdpcap(pcap_file)  # Read the PCAP file\n    print(f\"Total packets in the capture: {len(packets)}\\n\")\n\n    # Create a list to store packet lengths\n    packet_lengths = []\n\n    for packet in packets:\n        length = len(packet)\n        packet_lengths.append(length)\n\n    # Create a DataFrame to analyze packet lengths\n    df = pd.DataFrame({'Packet Length': packet_lengths})\n\n    # Calculate statistics\n    mean_length = df['Packet Length'].mean()\n    median_length = df['Packet Length'].median()\n    std_deviation = df['Packet Length'].std()\n\n    # Display statistics\n    print(f\"Mean Packet Length: {mean_length:.2f} bytes\")\n    print(f\"Median Packet Length: {median_length:.2f} bytes\")\n    print(f\"Standard Deviation of Packet Length: {std_deviation:.2f} bytes\")\n\n    # Plot the packet size distribution\n    plt.figure(figsize=(12, 6))\n    plt.hist(df['Packet Length'], bins=50, color='blue', alpha=0.7)\n    plt.title('Packet Size Distribution')\n    plt.xlabel('Packet Length (bytes)')\n    plt.ylabel('Frequency')\n    plt.grid(True)\n    plt.show()\n\nexcept Exception as e:\n    print(f\"An error occurred: {str(e)}\")"}],"is_classification": false}
{"id": "seed_task_14", "name": "PCAP Flow Analysis", "instruction": "Create a Python script that analyzes a PCAP file, extracts flow information based on source and destination IP addresses and port numbers, and prints details for each flow, including packet count and total length.", "instances": [{"input": "Path to PCAP file: /home/dnlab/Data-B/5G_LLM/5G_data/n3_example.pcap", "output": "import pandas as pd\nfrom scapy.all import *\n\n# Specify the PCAP file path\npcap_file = '/home/dnlab/Data-B/5G_LLM/5G_data/n3_example.pcap'\n\ntry:\n    packets = rdpcap(pcap_file)  # Read the PCAP file\n    print(f\"Total packets in the capture: {len(packets)}\\n\")\n\n    # Create a list to store packet data\n    packet_data = []\n\n    # Initialize a dictionary to store flow information\n    flows = {}\n\n    for packet in packets:\n        # Initialize fields to extract\n        src_ip, dst_ip, src_port, dst_port = '', '', '', ''\n\n        # IP Layer\n        if IP in packet:\n            src_ip = packet[IP].src\n            dst_ip = packet[IP].dst\n\n            # Transport Layer\n            if TCP in packet:\n                src_port = packet[TCP].sport\n                dst_port = packet[TCP].dport\n            elif UDP in packet:\n                src_port = packet[UDP].sport\n                dst_port = packet[UDP].dport\n\n            # Create a flow key based on source and destination IP addresses and port numbers\n            flow_key = (src_ip, dst_ip, src_port, dst_port)\n\n            # Update flow information\n            if flow_key not in flows:\n                flows[flow_key] = {\n                    'packets': [],\n                    'packet_count': 0,\n                    'total_length': 0\n                }\n\n            flows[flow_key]['packets'].append(packet)\n            flows[flow_key]['packet_count'] += 1\n            flows[flow_key]['total_length'] += len(packet)\n\n    # Analyze and print flow information\n    for flow_key, flow_data in flows.items():\n        src_ip, dst_ip, src_port, dst_port = flow_key\n        packet_count = flow_data['packet_count']\n        total_length = flow_data['total_length']\n\n        print(f\"Flow: {src_ip}:{src_port} -> {dst_ip}:{dst_port}\")\n        print(f\"Packet Count: {packet_count}\")\n        print(f\"Total Length: {total_length} bytes\")\n        print(\"\")\n\nexcept Exception as e:\n    print(f\"An error occurred: {str(e)}\")"}],"is_classification": false}
{"id": "seed_task_15", "name": "PCAP Statistical Analysis", "instruction": "Create a Python script that performs statistical analysis on a PCAP file, including general statistics, protocol distribution, packet length analysis, inter-arrival time analysis, and outlier detection. Display the analysis results.", "instances": [{"input": "Path to PCAP file: /home/dnlab/Data-B/5G_LLM/5G_data/n3_example.pcap", "output": "import pandas as pd\nfrom scapy.all import *\nimport numpy as np\n\n# Load the PCAP file\ndef load_pcap(file_path):\n    return rdpcap(file_path)\n\n# Extract packet information\ndef extract_packet_info(packets):\n    packet_data = []\n    for packet in packets:\n        timestamp = packet.time\n        length = len(packet)\n        proto = packet[IP].proto if IP in packet else None\n        packet_data.append([timestamp, length, proto])\n    return packet_data\n\n# Convert data to DataFrame\ndef to_dataframe(packet_data):\n    df = pd.DataFrame(packet_data, columns=['Timestamp', 'Length', 'Protocol'])\n    df['Inter-Arrival Time'] = df['Timestamp'].diff().fillna(0)\n    return df\n\n# Perform statistical analysis\ndef statistical_analysis(df):\n    print(\"Statistical Analysis Report\\n\")\n\n    # General Statistics\n    print(\"General Statistics:\")\n    print(df.describe())\n\n    # Protocol Distribution\n    protocol_stats = df['Protocol'].value_counts()\n    print(\"\\nProtocol Distribution:\")\n    print(protocol_stats)\n\n    # Packet Length Analysis\n    print(\"\\nPacket Length Analysis:\")\n    length_mean = df['Length'].mean()\n    length_std = df['Length'].std()\n    print(f\"Mean Packet Length: {length_mean:.2f}\")\n    print(f\"Standard Deviation of Packet Length: {length_std:.2f}\")\n\n    # Inter-Arrival Time Analysis\n    print(\"\\nInter-Arrival Time Analysis:\")\n    iat_mean = df['Inter-Arrival Time'].mean()\n    iat_std = df['Inter-Arrival Time'].std()\n    print(f\"Mean Inter-Arrival Time: {iat_mean:.6f} seconds\")\n    print(f\"Standard Deviation of Inter-Arrival Time: {iat_std:.6f} seconds\")\n\n    # Outlier Detection\n    print(\"\\nOutlier Detection:\")\n    upper_limit = length_mean + 2 * length_std\n    outliers = df[df['Length'] > upper_limit]\n    print(f\"Number of Outliers (Packet Length > {upper_limit:.2f}): {len(outliers)}\")\n\n# Specify the PCAP file path\npcap_file = '/home/dnlab/Data-B/5G_LLM/5G_data/n3_example.pcap'\n\npackets = load_pcap(pcap_file)\npacket_data = extract_packet_info(packets)\ndf = to_dataframe(packet_data)\nstatistical_analysis(df)"}],"is_classification": false}
{"id": "seed_task_16", "name": "Traffic Flow Analysis from PCAP File", "instruction": "Perform traffic flow analysis on network traffic data stored in a PCAP file. Analyze packet counts per flow and create a histogram of packet counts. You can use the provided Python script as a starting point.", "instances": [{"input": "PCAP file path: '5G_data/n3_example.pcap'", "output": "import pandas as pd\nimport numpy as np\nfrom scapy.all import *\nimport matplotlib.pyplot as plt\n\n# Specify the PCAP file path\npcap_file = '5G_data/n3_example.pcap'\n\ntry:\n    packets = rdpcap(pcap_file)  # Read the PCAP file\n\n    # Create a list to store flow data\n    flow_data = []\n\n    for packet in packets:\n        # Initialize flow fields\n        src_ip, dst_ip, src_port, dst_port, proto = '', '', '', '', ''\n        timestamp = packet.time\n\n        # IP Layer\n        if IP in packet:\n            src_ip = packet[IP].src\n            dst_ip = packet[IP].dst\n            proto = packet[IP].proto\n\n        # Transport Layer\n        if TCP in packet:\n            src_port = packet[TCP].sport\n            dst_port = packet[TCP].dport\n        elif UDP in packet:\n            src_port = packet[UDP].sport\n            dst_port = packet[UDP].dport\n\n        flow_data.append([timestamp, src_ip, dst_ip, src_port, dst_port, proto])\n\n    # Create a DataFrame from the flow data\n    flow_df = pd.DataFrame(flow_data, columns=['Timestamp', 'Source IP', 'Destination IP', 'Source Port', 'Destination Port', 'Protocol'])\n\n    # Perform traffic flow analysis\n    # Example 1: Count the number of packets per flow\n    flow_counts = flow_df.groupby(['Source IP', 'Source Port', 'Destination IP', 'Destination Port', 'Protocol']).size().reset_index(name='Packet Count')\n\n    # Plot the histogram of packet counts per flow\n    plt.figure(figsize=(10, 6))\n    plt.hist(flow_counts['Packet Count'], bins=20, color='skyblue', edgecolor='black')\n    plt.xlabel('Packet Count')\n    plt.ylabel('Frequency')\n    plt.title('Histogram of Packet Counts per Flow')\n    plt.grid(axis='y', linestyle='--', alpha=0.7)\n    plt.show()\n\n    # You can similarly plot other traffic flow statistics such as total bytes per flow or average packet length per flow.\n\nexcept Exception as e:\n    print(f\"An error occurred: {str(e)}\")"}], "is_classification": false}
