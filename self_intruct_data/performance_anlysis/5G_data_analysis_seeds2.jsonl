{"id": "seed_task_0", "name": "5G Network Performance KPIs", "instruction": "Generate Python code that calculates Key Performance Indicators (KPIs) for 5G network performance including Total Network Capacity, Capacity per Area, Capacity per Point, Cost per Capacity, Cost per Area, and Surplus per Area. The code should also create visual plots for each of these KPIs and create a new DataFrame to store KPI data.", "instances": [{"input": "5G Mobile Broadband data from the file 'data.csv'. Columns used for analysis: 'Spectrum.capacity', 'Small.cells.capacity', 'Shape_Area_km2', 'NUMPOINTS', 'Cost', 'Capacity.surplus'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv(\"data.csv\")\n\ndef analyze_5g_performance(df):\n    df['Total.capacity'] = df['Spectrum.capacity'] + df['Small.cells.capacity']\n    df['Capacity.per.area'] = df['Total.capacity'] / df['Shape_Area_km2']\n    df['Capacity.per.point'] = df['Total.capacity'] / df['NUMPOINTS']\n    df['Cost.per.capacity'] = df['Cost'] / df['Total.capacity']\n    df['Cost.per.area'] = df['Cost.per.km2'] * df['Shape_Area_km2']\n    df['Surplus.per.area'] = df['Capacity.surplus'] / df['Shape_Area_km2']\n    return df\n\ndf_performance = analyze_5g_performance(df)\n\nfig, axes = plt.subplots(nrows=3, ncols=2, figsize=(14, 15))\n\naxes[0, 0].bar(df_performance.index, df_performance['Total.capacity'], color='skyblue')\naxes[0, 0].set_title('Total Network Capacity')\naxes[0, 0].set_xlabel('Index')\naxes[0, 0].set_ylabel('Capacity (Mbps)')\n\naxes[0, 1].bar(df_performance.index, df_performance['Capacity.per.area'], color='orange')\naxes[0, 1].set_title('Capacity per Area')\naxes[0, 1].set_xlabel('Index')\naxes[0, 1].set_ylabel('Capacity/Area (Mbps/km²)')\n\naxes[1, 0].bar(df_performance.index, df_performance['Capacity.per.point'], color='green')\naxes[1, 0].set_title('Capacity per Point')\naxes[1, 0].set_xlabel('Index')\naxes[1, 0].set_ylabel('Capacity/Point (Mbps/Point)')\n\naxes[1, 1].bar(df_performance.index, df_performance['Cost.per.capacity'], color='red')\naxes[1, 1].set_title('Cost per Capacity')\naxes[1, 1].set_xlabel('Index')\naxes[1, 1].set_ylabel('Cost/Capacity (Currency/Mbps)')\n\naxes[2, 0].bar(df_performance.index, df_performance['Cost.per.area'], color='purple')\naxes[2, 0].set_title('Cost per Area')\naxes[2, 0].set_xlabel('Index')\naxes[2, 0].set_ylabel('Cost/Area (Currency/km²)')\n\naxes[2, 1].bar(df_performance.index, df_performance['Surplus.per.area'], color='teal')\naxes[2, 1].set_title('Surplus per Area')\naxes[2, 1].set_xlabel('Index')\naxes[2, 1].set_ylabel('Surplus/Area (Mbps/km²)')\n\nplt.tight_layout()\nplt.show()\n\ndf_performance[['Total.capacity', 'Capacity.per.area', 'Capacity.per.point', 'Cost.per.capacity', 'Cost.per.area', 'Surplus.per.area']]"}]}
{"id": "seed_task_1", "name": "5G Network Performance KPIs by Geotype", "instruction": "Create Python code that evaluates 5G network performance by geotype, calculating Key Performance Indicators (KPIs) such as Total Network Capacity, Capacity per Area, Capacity per Point, Cost per Capacity, Cost per Area, and Surplus per Area. The code should also generate visual plots for these KPIs, with distinct colors for each geotype.", "instances": [{"input": "5G Mobile Broadband data from '5G_Infrastructure/demand_driven_postcode_data_results.csv'. Columns used for analysis: 'Spectrum.capacity', 'Small.cells.capacity', 'Cost', 'Shape_Area_km2', 'NUMPOINTS', 'Capacity.surplus', 'geotype'", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load the CSV file into a pandas DataFrame\ncell_infrastruct = pd.read_csv(\"5G_Infrastructure/demand_driven_postcode_data_results.csv\")\n\ndef analyze_5g_performance_by_geotype(df):\n    numeric_cols = ['Spectrum.capacity', 'Small.cells.capacity', 'Cost', 'Shape_Area_km2', 'NUMPOINTS']\n    for col in numeric_cols:\n        df[col] = pd.to_numeric(df[col], errors='coerce')\n\n    df.fillna(0, inplace=True)\n\n    df['Total.capacity'] = df['Spectrum.capacity'] + df['Small.cells.capacity']\n    df['Capacity.per.area'] = df['Total.capacity'] / df['Shape_Area_km2']\n    df['Capacity.per.point'] = df['Total.capacity'] / df['NUMPOINTS']\n\n    epsilon = 1e-10\n    df['Cost.per.capacity'] = df['Cost'] / (df['Total.capacity'] + epsilon)\n    df['Cost.per.area'] = df['Cost'] / (df['Shape_Area_km2'] + epsilon)\n\n    df['Surplus.per.area'] = df['Capacity.surplus'] / df['Shape_Area_km2']\n\n    df.replace([np.inf, -np.inf], 0, inplace=True)\n\n    grouped = df.groupby('geotype').mean().reset_index()\n    return grouped\n\ndf_performance_by_geotype = analyze_5g_performance_by_geotype(cell_infrastruct)\n\nfig, axes = plt.subplots(nrows=3, ncols=2, figsize=(14, 15), constrained_layout=True)\n\ncolors = ['skyblue', 'orange', 'green', 'red', 'purple', 'teal']\n\nfor i, (column, color) in enumerate(zip(['Total.capacity', 'Capacity.per.area', 'Capacity.per.point', \n                                         'Cost.per.capacity', 'Cost.per.area', 'Surplus.per.area'], colors)):\n    ax = axes.flatten()[i]\n    ax.bar(df_performance_by_geotype['geotype'], df_performance_by_geotype[column], color=color)\n    ax.set_title(column.replace('.', ' ').title())\n    ax.set_xlabel('Geotype')\n    ax.set_ylabel(column)\n    ax.tick_params(labelrotation=45)\n\nplt.show()"}], "is_classification": false}
{"id": "seed_task_2", "name": "5G Capacity Increase Analysis", "instruction": "Write Python code to calculate the increase in per-user capacity brought by 5G spectrum bands compared to LTE. The code should account for the number of users and the capacity provided by both LTE and 5G small cells. After calculating the per-user capacity increase, create a plot that visualizes these increases across the dataset and marks the threshold level at which deploying small cells becomes necessary.", "instances": [{"input": "5G_Infrastructure/demand_driven_postcode_data_results.csv. Columns used for analysis: 'Spectrum.capacity', 'Small.cells.capacity', 'NUMPOINTS'", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('5G_Infrastructure/demand_driven_postcode_data_results.csv')\n\ndef calculate_per_user_capacity_increase(df):\n    df['per_user_capacity_LTE'] = df['Spectrum.capacity'] / df['NUMPOINTS']\n    df['per_user_capacity_5G'] = (df['Spectrum.capacity'] + df['Small.cells.capacity']) / df['NUMPOINTS']\n\n    df['per_user_capacity_increase'] = df['per_user_capacity_5G'] - df['per_user_capacity_LTE']\n\n    return df\n\ndf = calculate_per_user_capacity_increase(df)\n\nplt.figure(figsize=(10, 6))\nplt.plot(df.index, df['per_user_capacity_increase'], label='Per User Capacity Increase')\nplt.axhline(y=5000, color='r', linestyle='--', label='Threshold for Small Cells')\n\nplt.title('Per User Capacity Increase with 5G Spectrum Bands')\nplt.xlabel('Index')\nplt.ylabel('Capacity Increase (Mbps)')\nplt.legend()\nplt.show()"}], "is_classification": false}
{"id": "seed_task_3", "name": "5G Capacity Increase Analysis by Geotype", "instruction": "Develop Python code to assess the rise in per-user network capacity due to the introduction of 5G spectrum bands, contrasting it with existing LTE capabilities. Ensure the code processes data to average the capacity increase across different geographical types. Then, plot these averages, assigning a unique color to each geotype and include a legend for identification.", "instances": [{"input": "5G_Infrastructure/data.csv. Columns used for analysis: 'Spectrum.capacity', 'Small.cells.capacity', 'NUMPOINTS', 'geotype'", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndf = pd.read_csv('5G_Infrastructure/demand_driven_postcode_data_results.csv')\n\ndef calculate_per_user_capacity_increase(df):\n    df['per_user_capacity_LTE'] = df['Spectrum.capacity'] / df['NUMPOINTS']\n    df['per_user_capacity_5G'] = (df['Spectrum.capacity'] + df['Small.cells.capacity']) / df['NUMPOINTS']\n\n    df['per_user_capacity_increase'] = df['per_user_capacity_5G'] - df['per_user_capacity_LTE']\n\n    return df\n\ndf = calculate_per_user_capacity_increase(df)\n\ndf_grouped = df.groupby('geotype').mean().reset_index()\n\ncolors = ['red', 'green', 'blue', 'cyan', 'magenta', 'yellow', 'black', 'orange', 'purple', 'brown', 'pink', 'gray', 'olive']\n\nif len(df_grouped['geotype']) > len(colors):\n    colors = colors * (len(df_grouped['geotype']) // len(colors) + 1)\n\nplt.figure(figsize=(10, 6))\nfor i, row in df_grouped.iterrows():\n    plt.bar(row['geotype'], row['per_user_capacity_increase'], color=colors[i], label=row['geotype'])\n\nplt.title('Per User Capacity Increase with 5G Spectrum Bands by Geotype')\nplt.xlabel('Geotype')\nplt.ylabel('Capacity Increase (Mbps)')\nplt.xticks(rotation=45)\nplt.legend(title='Geotype', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()"}], "is_classification": false}
{"id": "seed_task_4", "name": "5G Infrastructure Cost Distribution by Strategy", "instruction": "Craft Python code to calculate and visualize the distribution of investment costs in 5G network infrastructure strategies. The code should evaluate the average percentage costs dedicated to Radio Access Network (RAN) and Civil Works across different strategic approaches, such as Spectrum Integration, Small Cells, and Hybrid methods. The output should be a bar chart that clearly distinguishes the cost composition of each strategy.", "instances": [{"input": "5G_Infrastructure/demand_driven_postcode_data_results.csv. Columns used for analysis: 'Strategy', 'RAN.macro', 'RAN.small.cells', 'Civil.works.macro', 'Civil.works.small', 'Cost'", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('5G_Infrastructure/demand_driven_postcode_data_results.csv')\n\ndf.fillna(0, inplace=True)\ndf = df[df['Cost'] > 0]\n\ndf.loc[:, 'RAN_cost_percentage'] = 0\ndf.loc[:, 'Civil_works_cost_percentage'] = 0\n\ndf.loc[df['Strategy'] == 'Spectrum Integration', 'RAN_cost_percentage'] = df['RAN.macro'] / df['Cost'] * 100\ndf.loc[df['Strategy'] == 'Spectrum Integration', 'Civil_works_cost_percentage'] = df['Civil.works.macro'] / df['Cost'] * 100\ndf.loc[df['Strategy'] == 'Small Cells', 'RAN_cost_percentage'] = df['RAN.small.cells'] / df['Cost'] * 100\ndf.loc[df['Strategy'] == 'Small Cells', 'Civil_works_cost_percentage'] = df['Civil.works.small'] / df['Cost'] * 100\ndf.loc[df['Strategy'] == 'Hybrid', 'RAN_cost_percentage'] = (df['RAN.macro'] + df['RAN.small.cells']) / df['Cost'] * 100\ndf.loc[df['Strategy'] == 'Hybrid', 'Civil_works_cost_percentage'] = (df['Civil.works.macro'] + df['Civil.works.small']) / df['Cost'] * 100\ngrouped_costs = df.groupby('Strategy').mean()[['RAN_cost_percentage', 'Civil_works_cost_percentage']]\ngrouped_costs.plot(kind='bar', stacked=False, figsize=(12, 7), title='Cost Distribution by Strategy')\nplt.ylabel('Percentage of Total Cost')\nplt.xlabel('Strategy')\nplt.legend(title='Cost Components')\nplt.show()\nprint(grouped_costs)"}], "is_classification": false}
{"id": "seed_task_5", "name": "5G vs LTE User Traffic Comparison", "instruction": "Construct Python code that calculates the mean traffic per user for LTE and 5G networks, distinguishing between 'all_spectrum' and 'Limited Spectrum Bands' scenarios. The code must process the data to compare average user traffic across different geotypes and visualize this comparison using bar charts that differentiate between the two spectrum scenarios.", "instances": [{"input": "5G_Infrastructure/demand_driven_postcode_data_results.csv. Columns used for analysis: 'Spectrum.capacity', 'Small.cells.capacity', 'NUMPOINTS', 'spectrum_limitations', 'geotype'", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Load the CSV file into a pandas DataFrame\ndf = pd.read_csv('5G_Infrastructure/demand_driven_postcode_data_results.csv')\n\n# Calculate per user traffic level for LTE and 5G, avoiding division by zero\ndf['per_user_traffic_LTE'] = df.apply(lambda row: row['Spectrum.capacity'] / row['NUMPOINTS'] if row['NUMPOINTS'] > 0 else 0, axis=1)\ndf['per_user_traffic_5G'] = df.apply(lambda row: (row['Spectrum.capacity'] + row['Small.cells.capacity']) / row['NUMPOINTS'] if row['NUMPOINTS'] > 0 else 0, axis=1)\n\ndf_all_spectrum = df[df['spectrum_limitations'] == 'all_spectrum']\ndf_limited_spectrum = df[df['spectrum_limitations'] == 'Limited Spectrum Bands']\n\n# Group by 'geotype' and calculate the mean per user traffic for both spectrum limitation scenarios\ngrouped_all_spectrum = df_all_spectrum.groupby('geotype').agg({\n    'per_user_traffic_LTE': 'mean',\n    'per_user_traffic_5G': 'mean'\n}).reset_index()\n\ngrouped_limited_spectrum = df_limited_spectrum.groupby('geotype').agg({\n    'per_user_traffic_LTE': 'mean',\n    'per_user_traffic_5G': 'mean'\n}).reset_index()\n\n# Plot the data for 'all_spectrum'\nfig, ax = plt.subplots(figsize=(12, 7))\nr1 = np.arange(len(grouped_all_spectrum))\nr2 = [x + bar_width for x in r1]\nax.bar(r1, grouped_all_spectrum['per_user_traffic_LTE'], color='blue', width=bar_width, label='LTE (All Spectrum)')\nax.bar(r2, grouped_all_spectrum['per_user_traffic_5G'], color='orange', width=bar_width, label='5G (All Spectrum)')\nax.set_xlabel('Geotype')\nax.set_ylabel('Average Traffic per User (Mbps)')\nax.set_title('Average Traffic per User by Geotype (All Spectrum)')\nax.set_xticks([r + bar_width / 2 for r in r1])\nax.set_xticklabels(grouped_all_spectrum['geotype'], rotation=45)\nax.legend()\nplt.tight_layout()\nplt.show()\n\n# Plot the data for 'Limited Spectrum Bands'\nfig, ax = plt.subplots(figsize=(12, 7))\nr1 = np.arange(len(grouped_limited_spectrum))\nr2 = [x + bar_width for x in r1]\nax.bar(r1, grouped_limited_spectrum['per_user_traffic_LTE'], color='blue', width=bar_width, label='LTE (Limited Spectrum)')\nax.bar(r2, grouped_limited_spectrum['per_user_traffic_5G'], color='orange', width=bar_width, label='5G (Limited Spectrum)')\nax.set_xlabel('Geotype')\nax.set_ylabel('Average Traffic per User (Mbps)')\nax.set_title('Average Traffic per User by Geotype (Limited Spectrum Bands)')\nax.set_xticks([r + bar_width / 2 for r in r1])\nax.set_xticklabels(grouped_limited_spectrum['geotype'], rotation=45)\nax.legend()\nplt.tight_layout()\nplt.show()"}], "is_classification": false}
{"id": "seed_task_6", "name": "Average Investment Cost per User by Geotype", "instruction": "Create a Python script to compute and visualize the average investment cost per user across different geotypes from a 5G infrastructure dataset. The code should handle non-numeric values gracefully and avoid division by zero. It should group the data by geotype, calculate the mean investment cost per user, and display the results in a color-coded bar chart with a legend indicating each geotype.", "instances": [{"input": "5G_Infrastructure/demand_driven_postcode_data_results.csv. Columns used for analysis: 'Cost', 'NUMPOINTS', 'geotype'", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load the CSV file into a pandas DataFrame\ndf = pd.read_csv('5G_Infrastructure/demand_driven_postcode_data_results.csv')\n\n# Convert relevant columns to numeric, replacing non-numeric values with NaN\nnumeric_columns = ['Cost', 'NUMPOINTS']\nfor column in numeric_columns:\n    df[column] = pd.to_numeric(df[column], errors='coerce')\n\n# Fill NaN values that result from non-numeric data or division by zero with zeros\ndf.fillna(0, inplace=True)\n\n# Ensure there are no rows with NUMPOINTS equal to zero to avoid division by zero\ndf = df[df['NUMPOINTS'] > 0]\n\n# Calculate investment cost per user\ndf['Investment.cost.per.user'] = df['Cost'] / df['NUMPOINTS']\n\n# Group by geotype and calculate the mean investment cost per user for each geotype\ninvestment_cost_by_geotype = df.groupby('geotype').agg({\n    'Investment.cost.per.user': 'mean'\n}).reset_index()\n\n# Define colors for each geotype\ncolors = plt.cm.viridis(np.linspace(0, 1, len(investment_cost_by_geotype)))\n\n# Plot the mean investment cost per user by geotype\nplt.figure(figsize=(10, 6))\nfor i, geotype in enumerate(investment_cost_by_geotype['geotype']):\n    plt.bar(geotype, investment_cost_by_geotype.loc[i, 'Investment.cost.per.user'], color=colors[i], label=str(geotype))\n\nplt.title('Average Investment Cost per User by Geotype')\nplt.xlabel('Geotype')\nplt.ylabel('Investment Cost per User (Currency)')\nplt.xticks(rotation=45)\nplt.legend(title='Geotype', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()"}], "is_classification": false}
{"id": "seed_task_7", "name": "5G LTE Network Traffic Analysis", "instruction": "Write a Python script using pandas and matplotlib to analyze and visualize a 5G LTE network traffic dataset. The script should categorize data into traffic volume, jitter, and CQI, then plot these metrics for each User Equipment. Ensure the script handles data inconsistencies and includes clear labels and legends for each plot.", "instances": [{"input": "5G_data/ue-lte-network-traffic-stats.csv. Columns used for analysis: 'web-rtc', 'sipp', 'web-server', 'Jitter', 'CQI'", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('5G_data/ue-lte-network-traffic-stats.csv')\n\ntraffic_columns = [col for col in df.columns if 'web-rtc' in col or 'sipp' in col or 'web-server' in col]\njitter_columns = [col for col in df.columns if 'Jitter' in col]\ncqi_columns = [col for col in df.columns if 'CQI' in col]\n\nplt.figure(figsize=(15, 15))\n\nplt.subplot(3, 1, 1)\nfor col in traffic_columns:\n    plt.plot(df.index, df[col], label=col)\nplt.title('Traffic Volume Analysis')\nplt.xlabel('Index')\nplt.ylabel('Volume')\nplt.legend()\n\nplt.subplot(3, 1, 2)\nfor col in jitter_columns:\n    plt.plot(df.index, df[col], label=col)\nplt.title('Jitter Analysis')\nplt.xlabel('Index')\nplt.ylabel('Jitter (ms)')\nplt.legend()\n\nplt.subplot(3, 1, 3)\nfor col in cqi_columns:\n    plt.plot(df.index, df[col], label=col)\nplt.title('CQI Analysis')\nplt.xlabel('Index')\nplt.ylabel('CQI')\nplt.legend()\n\nplt.tight_layout()\nplt.show()"}], "is_classification": false}
{"id": "seed_task_8", "name": "5G Traffic Volume Analysis by User Equipment", "instruction": "Develop a Python script using pandas and matplotlib to separate the data by traffic volume for web-rtc, sipp, and web-server applications, and then graph these figures distinctly for each User Equipment (UE).", "instances": [{"input": "5G_data/ue-lte-network-traffic-stats.csv. Columns used for analysis: 'UE1: web-rtc', 'UE1: sipp', 'UE1: web-server', 'UE2: web-rtc', 'UE2: sipp', 'UE2: web-server', 'UE3: web-rtc', 'UE3: sipp', 'UE3: web-server'", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('5G_data/ue-lte-network-traffic-stats.csv')\n\napplications = ['web-rtc', 'sipp', 'web-server']\n\nfor ue in range(1, 4):\n    plt.figure(figsize=(10, 6))\n\n    for app in applications:\n        traffic_col = f'UE{ue}: {app}'\n        plt.plot(df.index, df[traffic_col], label=f'{app}')\n\n    plt.title(f'Traffic Volume for UE{ue}')\n    plt.xlabel('Index')\n    plt.ylabel('Traffic Volume')\n    plt.legend()\n    plt.grid(True)\n    plt.show()"}], "is_classification": false}
{"id": "seed_task_9", "name": "5G Peak Traffic Volume Analysis", "instruction": "Create a Python script to identify and visualize peak traffic volumes in a 5G LTE network dataset. Each User Equipment (UE) and service ('web-rtc', 'sipp', 'web-server') should have distinct peak points plotted on separate graphs. Include appropriate labels and a legend to differentiate between services.", "instances": [{"input": "5G_data/ue-lte-network-traffic-stats.csv. Columns used for analysis: 'UE1: web-rtc', 'UE1: sipp', 'UE1: web-server', 'UE2: web-rtc', 'UE2: sipp', 'UE2: web-server', 'UE3: web-rtc', 'UE3: sipp', 'UE3: web-server'", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.signal import find_peaks\n\ndf = pd.read_csv('5G_data/ue-lte-network-traffic-stats.csv')\n\n# Define a function to find peaks and plot them for each service\ndef find_and_plot_peaks(df, ues, services):\n    color_dict = {'web-rtc': 'blue', 'sipp': 'green', 'web-server': 'red'}\n\n    for ue in ues:\n        plt.figure(figsize=(10, 5))\n        for service in services:\n            col_name = f'{ue}: {service}'\n            traffic_mean = df[col_name].mean()\n            traffic_std = df[col_name].std()\n            peaks, _ = find_peaks(df[col_name], height=(traffic_mean + traffic_std))\n            plt.scatter(peaks, df[col_name].iloc[peaks], color=color_dict[service], label=f'{ue} {service}')\n        plt.title(f'Peak Traffic Volume Analysis for {ue}')\n        plt.xlabel('Sample Index')\n        plt.ylabel('Traffic Volume')\n        plt.legend()\n        plt.show()\n\nues = ['UE1', 'UE2', 'UE3']\nservices = ['web-rtc', 'sipp', 'web-server']\nfind_and_plot_peaks(df, ues, services)"}], "is_classification": false}
{"id": "seed_task_10", "name": "5G Jitter and CQI Box Plots", "instruction": "Write a Python script using pandas and matplotlib to process a 5G LTE network dataset. The script should generate box plots for 'Jitter' and 'CQI' metrics for each User Equipment (UE). Ensure the script includes informative labels and a clear legend.", "instances": [{"input": "5G_data/ue-lte-network-traffic-stats.csv. Columns used for analysis: 'Jitter' and 'CQI'", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('5G_data/ue-lte-network-traffic-stats.csv')\n\ntraffic_columns = [col for col in df.columns if 'web-rtc' in col or 'sipp' in col or 'web-server' in col]\njitter_columns = [col for col in df.columns if 'Jitter' in col]\ncqi_columns = [col for col in df.columns if 'CQI' in col]\n\nplt.figure(figsize=(15, 15))\n\nplt.subplot(3, 1, 2)\njitter_data = [df[col].dropna() for col in jitter_columns]\nplt.boxplot(jitter_data, labels=jitter_columns)\nplt.title('Jitter Analysis')\nplt.ylabel('Jitter (ms)')\n\nplt.subplot(3, 1, 3)\ncqi_data = [df[col].dropna() for col in cqi_columns]\nplt.boxplot(cqi_data, labels=cqi_columns)\nplt.title('CQI Analysis')\nplt.ylabel('CQI')\n\nplt.tight_layout()\nplt.show()"}], "is_classification": false}
{"id": "seed_task_11", "name": "5G Mean Metrics Analysis by User Equipment", "instruction": "Develop a Python script to calculate and plot the mean traffic volume, jitter, and CQI for each User Equipment (UE) in a 5G LTE network dataset. Create separate bar charts for each metric with distinct colors and appropriate labels for easy comparison.", "instances": [{"input": "5G_data/ue-lte-network-traffic-stats.csv. Columns used for analysis: 'UE1: web-rtc', 'UE1: sipp', 'UE1: web-server', 'UE2: web-rtc', 'UE2: sipp', 'UE2: web-server', 'UE3: web-rtc', 'UE3: sipp', 'UE3: web-server'", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('5G_data/ue-lte-network-traffic-stats.csv')\n\nmean_values = {'UE1': {}, 'UE2': {}, 'UE3': {}}\n\nfor i in range(1, 4):\n    mean_values[f'UE{i}']['Traffic'] = df[f'UE{i}: web-rtc'].mean()\n    mean_values[f'UE{i}']['Jitter'] = df[f'UE{i}-Jitter'].mean()\n    mean_values[f'UE{i}']['CQI'] = df[f'UE{i}-CQI'].mean()\n\ntraffic_data = {ue: values['Traffic'] for ue, values in mean_values.items()}\njitter_data = {ue: values['Jitter'] for ue, values in mean_values.items()}\ncqi_data = {ue: values['CQI'] for ue, values in mean_values.items()}\n\nplt.figure(figsize=(10, 5))\nplt.bar(traffic_data.keys(), traffic_data.values(), color='skyblue')\nplt.title('Mean Traffic Volume by UE')\nplt.xlabel('UE')\nplt.ylabel('Traffic Volume')\nplt.show()\n\nplt.figure(figsize=(10, 5))\nplt.bar(jitter_data.keys(), jitter_data.values(), color='orange')\nplt.title('Mean Jitter by UE')\nplt.xlabel('UE')\nplt.ylabel('Jitter')\nplt.show()\n\nplt.figure(figsize=(10, 5))\nplt.bar(cqi_data.keys(), cqi_data.values(), color='green')\nplt.title('Mean CQI by UE')\nplt.xlabel('UE')\nplt.ylabel('CQI')\nplt.show()"}], "is_classification": false}
{"id": "seed_task_12", "name": "5G Average Traffic Volume Analysis", "instruction": "Craft a Python script to analyze a 5G LTE network traffic dataset. The script should compute the average traffic volume for different application categories ('web-rtc', 'sipp', 'web-server') for each User Equipment (UE1, UE2, UE3). It should then visualize these averages in separate bar charts, one for each UE, with clear labels indicating the application categories and the mean traffic volume.", "instances": [{"input": "5G_data/ue-lte-network-traffic-stats.csv. Columns used for analysis: 'UE1: web-rtc', 'UE1: sipp', 'UE1: web-server', 'UE2: web-rtc', 'UE2: sipp', 'UE2: web-server', 'UE3: web-rtc', 'UE3: sipp', 'UE3: web-server'", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('5G_data/ue-lte-network-traffic-stats.csv')\nmeans_by_ue = {}\napplications = ['web-rtc', 'sipp', 'web-server']\nfor i in range(1, 4):\n    ue_data = {}\n    for app in applications:\n        column_name = f'UE{i}: {app}'\n        ue_data[app] = df[column_name].mean()\n    means_by_ue[f'UE{i}'] = ue_data\nfig, axes = plt.subplots(1, 3, figsize=(15, 5), sharey=True)\nfor i, (ue, ue_data) in enumerate(means_by_ue.items(), 1):\n    axes[i - 1].bar(ue_data.keys(), ue_data.values())\n    axes[i - 1].set_title(f'Mean Traffic for {ue}')\n    axes[i - 1].set_xlabel('Application Category')\n    axes[i - 1].set_ylabel('Mean Traffic Volume')\nplt.tight_layout()\nplt.show()"}], "is_classification": false}
{"id": "seed_task_13", "name": "5G Mean Jitter and CQI Analysis", "instruction": "Develop a Python script using pandas and matplotlib to analyze a 5G LTE network traffic dataset. The script should calculate the average jitter and CQI for each User Equipment (UE1, UE2, UE3) and visualize these averages in separate bar charts. Each bar chart should have different colors for each UE and include clear labels for easy understanding.", "instances": [{"input": "5G_data/ue-lte-network-traffic-stats.csv. Columns used for analysis: 'UE1-Jitter', 'UE2-Jitter', 'UE3-Jitter', 'UE1-CQI', 'UE2-CQI', 'UE3-CQI'", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('5G_data/ue-lte-network-traffic-stats.csv')\nmean_jitters = []\nmean_cqis = []\nfor i in range(1, 4):\n    mean_jitters.append(df[f'UE{i}-Jitter'].mean())\n    mean_cqis.append(df[f'UE{i}-CQI'].mean())\nplt.figure(figsize=(10, 5))\nplt.bar(['UE1', 'UE2', 'UE3'], mean_jitters, color=['red', 'green', 'blue'])\nplt.title('Mean Jitter for Each UE')\nplt.xlabel('User Equipment')\nplt.ylabel('Jitter (ms)')\nplt.show()\nplt.figure(figsize=(10, 5))\nplt.bar(['UE1', 'UE2', 'UE3'], mean_cqis, color=['red', 'green', 'blue'])\nplt.title('Mean CQI for Each UE')\nplt.xlabel('User Equipment')\nplt.ylabel('CQI')\nplt.show()"}], "is_classification": false}
{"id": "seed_task_14", "name": "5G Jitter Analysis with Outliers", "instruction": "Write a Python script to analyze jitter data in a 5G LTE network traffic dataset. The script should use pandas for data processing and matplotlib for visualization. It should plot jitter data points for each UE and highlight outliers in a contrasting color. Ensure the script includes a legend distinguishing regular data points from outliers and provides clear axis labels.", "instances": [{"input": "5G_data/ue-lte-network-traffic-stats.csv. Columns used for analysis: 'UE1-Jitter', 'UE2-Jitter', 'UE3-Jitter'", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('5G_data/ue-lte-network-traffic-stats.csv')\n\ndef find_outliers_iqr(df, column):\n    Q1 = df[column].quantile(0.25)\n    Q3 = df[column].quantile(0.75)\n    IQR = Q3 - Q1\n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n    return df[(df[column] < lower_bound) | (df[column] > upper_bound)]\n\nplt.figure(figsize=(14, 6))\n\nfor i in range(1, 4):\n    plt.scatter(df.index, df[f'UE{i}-Jitter'], alpha=0.5, s=10)\n\nplt.scatter([], [], color='grey', label='UE1 Jitter', alpha=0.5, s=10)\nplt.scatter([], [], color='grey', label='UE2 Jitter', alpha=0.5, s=10)\nplt.scatter([], [], color='grey', label='UE3 Jitter', alpha=0.5, s=10)\n\nfor i in range(1, 4):\n    outliers = find_outliers_iqr(df, f'UE{i}-Jitter')\n    plt.scatter(outliers.index, outliers[f'UE{i}-Jitter'], color='red', s=50, marker='D')\n\nplt.scatter([], [], color='red', s=50, marker='D', label='Outliers')\n\nplt.title('Jitter Analysis with Emphasized Outliers')\nplt.xlabel('Time Index')\nplt.ylabel('Jitter (ms)')\nplt.legend()\nplt.grid(True)\nplt.show()"}], "is_classification": false}
{"id": "seed_task_15", "name": "Total Data Throughput Analysis", "instruction": "Create a Python script to analyze and visualize the total data throughput for each application (web-rtc, sipp, web-server) in a 5G LTE network traffic dataset. Use pandas to sum the throughput data across all User Equipments for each application, and matplotlib to plot this data in a bar chart with distinct colors for each application.", "instances": [{"input": "5G_data/ue-lte-network-traffic-stats.csv. Columns used for analysis: 'UE1: web-rtc', 'UE1: sipp', 'UE1: web-server', 'UE2: web-rtc', 'UE2: sipp', 'UE2: web-server', 'UE3: web-rtc', 'UE3: sipp', 'UE3: web-server'", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('5G_data/ue-lte-network-traffic-stats.csv')\napplications = ['web-rtc', 'sipp', 'web-server']\nthroughput_data = {}\nfor app in applications:\n    throughput_data[app] = df[[f'UE{i}: {app}' for i in range(1, 4)]].sum().sum()\nplt.figure(figsize=(10, 6))\nplt.bar(throughput_data.keys(), throughput_data.values(), color=['red', 'green', 'blue'])\nplt.title('Throughput Analysis for Each Application')\nplt.xlabel('Application')\nplt.ylabel('Total Data Throughput')\nplt.show()"}], "is_classification": false}
{"id": "seed_task_16", "name": "CQI Assessment with Outliers Detection", "instruction": "Develop a Python script using pandas and matplotlib to perform a CQI (Channel Quality Indicator) assessment for each User Equipment (UE) in a 5G LTE network traffic dataset. The script should plot CQI values using a box plot and identify outliers using the Interquartile Range (IQR) method.", "instances": [{"input": "5G_data/ue-lte-network-traffic-stats.csv. Columns used for analysis: 'UE1-CQI', 'UE2-CQI', 'UE3-CQI'", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('5G_data/ue-lte-network-traffic-stats.csv')\nplt.figure(figsize=(14, 6))\ncqi_data = []\nfor i in range(1, 4):\n    cqi_data.append(df[f'UE{i}-CQI'])\nplt.boxplot(cqi_data, labels=[f'UE{i}' for i in range(1, 4)])\nplt.title('CQI Assessment for Each UE')\nplt.xlabel('User Equipment')\nplt.ylabel('CQI Value')\nplt.grid(True)\nplt.show()"}], "is_classification": false}
{"id": "seed_task_17", "name": "UE Performance Benchmarking", "instruction": "Write a Python script to benchmark the performance of User Equipments in a 5G LTE network traffic dataset. Calculate the average jitter and CQI for each UE using pandas, and compare these averages against predefined benchmarks using matplotlib. Visualize the results in bar charts with a horizontal line indicating the benchmark, and include labels and legends.", "instances": [{"input": "5G_data/ue-lte-network-traffic-stats.csv. Columns used for analysis: 'UE1-Jitter', 'UE2-Jitter', 'UE3-Jitter', 'UE1-CQI', 'UE2-CQI', 'UE3-CQI'", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('5G_data/ue-lte-network-traffic-stats.csv')\nbenchmark_jitter = 0.01\nbenchmark_cqi = 12\naverage_jitter = {f'UE{i}': df[f'UE{i}-Jitter'].mean() for i in range(1, 4)}\naverage_cqi = {f'UE{i}': df[f'UE{i}-CQI'].mean() for i in range(1, 4)}\nplt.figure(figsize=(14, 6))\nplt.subplot(1, 2, 1)\nplt.bar(average_jitter.keys(), average_jitter.values())\nplt.axhline(y=benchmark_jitter, color='r', linestyle='--', label='Jitter Benchmark')\nplt.ylabel('Average Jitter (ms)')\nplt.title('Jitter Benchmarking by UE')\nplt.legend()\nplt.subplot(1, 2, 2)\nplt.bar(average_cqi.keys(), average_cqi.values())\nplt.axhline(y=benchmark_cqi, color='r', linestyle='--', label='CQI Benchmark')\nplt.ylabel('Average CQI')\nplt.title('CQI Benchmarking by UE')\nplt.legend()\nplt.tight_layout()\nplt.show()"}], "is_classification": false}
{"id": "seed_task_18", "name": "Traffic Data Anomaly Detection", "instruction": "Create a Python script to identify anomalies in 5G LTE network traffic data. Implement an Interquartile Range (IQR) method to detect anomalies in traffic, jitter, and CQI metrics for each User Equipment. The script should calculate the number of anomalies found in each category and store these counts in a DataFrame.", "instances": [{"input": "5G_data/ue-lte-network-traffic-stats.csv. Columns used for analysis: 'UE1: web-rtc', 'UE1: sipp', 'UE1: web-server', 'UE2: web-rtc', 'UE2: sipp', 'UE2: web-server', 'UE3: web-rtc', 'UE3: sipp', 'UE3: web-server', 'UE1-Jitter', 'UE2-Jitter', 'UE3-Jitter', 'UE1-CQI', 'UE2-CQI', 'UE3-CQI'", "output": "import pandas as pd\ndf = pd.read_csv('5G_data/ue-lte-network-traffic-stats.csv')\ndef calculate_anomalies(data, factor=1.5):\n    Q1 = data.quantile(0.25)\n    Q3 = data.quantile(0.75)\n    IQR = Q3 - Q1\n    lower_bound = Q1 - factor * IQR\n    upper_bound = Q3 + factor * IQR\n    return data.apply(lambda x: 'Anomaly' if x < lower_bound or x > upper_bound else 'Normal')\ndf['Traffic_Anomaly'] = calculate_anomalies(df['UE1: web-rtc'])\ndf['Jitter_Anomaly'] = calculate_anomalies(df['UE1-Jitter'])\ndf['CQI_Anomaly'] = calculate_anomalies(df['UE1-CQI'])\nanomalies_df = df[['Traffic_Anomaly', 'Jitter_Anomaly', 'CQI_Anomaly']]\ntraffic_anomalies_count = anomalies_df['Traffic_Anomaly'].value_counts().get('Anomaly', 0)\njitter_anomalies_count = anomalies_df['Jitter_Anomaly'].value_counts().get('Anomaly', 0)\ncqi_anomalies_count = anomalies_df['CQI_Anomaly'].value_counts().get('Anomaly', 0)\nprint(f\"Traffic Anomalies: {traffic_anomalies_count}\")\nprint(f\"Jitter Anomalies: {jitter_anomalies_count}\")\nprint(f\"CQI Anomalies: {cqi_anomalies_count}\")"}], "is_classification": false}
{"id": "seed_task_19", "name": "Advanced Metrics Calculation", "instruction": "Develop a Python script to calculate and store advanced metrics for 5G LTE network traffic data. The script should compute metrics like maximum traffic, standard deviation, high traffic instances, and percentiles for each application.", "instances": [{"input": "5G_data/ue-lte-network-traffic-stats.csv. Columns used for analysis: 'UE1: web-rtc', 'UE1: sipp', 'UE1: web-server', 'UE2: web-rtc', 'UE2: sipp', 'UE2: web-server', 'UE3: web-rtc', 'UE3: sipp', 'UE3: web-server'", "output": "import pandas as pd\ndf = pd.read_csv('5G_data/ue-lte-network-traffic-stats.csv')\ndef calculate_metrics(df, column):\n    max_traffic = df[column].max()\n    traffic_std = df[column].std()\n    high_traffic_threshold = df[column].mean() + traffic_std\n    high_traffic_count = df[df[column] > high_traffic_threshold].shape[0]\n    percentiles = df[column].quantile([0.25, 0.5, 0.75]).to_list()\n    return max_traffic, traffic_std, high_traffic_count, percentiles\nweb_rtc_metrics = calculate_metrics(df, 'UE1: web-rtc')\nsipp_metrics = calculate_metrics(df, 'UE1: sipp')\nweb_server_metrics = calculate_metrics(df, 'UE1: web-server')\nuser_behavior_df = pd.DataFrame({\n    'Application': ['web-rtc', 'sipp', 'web-server'],\n    'Average_Traffic': [df['UE1: web-rtc'].mean(), df['UE1: sipp'].mean(), df['UE1: web-server'].mean()],\n    'Max_Traffic': [web_rtc_metrics[0], sipp_metrics[0], web_server_metrics[0]],\n    'Traffic_Std_Dev': [web_rtc_metrics[1], sipp_metrics[1], web_server_metrics[1]],\n    'High_Traffic_Instances': [web_rtc_metrics[2], sipp_metrics[2], web_server_metrics[2]],\n    '25th_Percentile': [metric[3][0] for metric in [web_rtc_metrics, sipp_metrics, web_server_metrics]],\n    'Median': [metric[3][1] for metric in [web_rtc_metrics, sipp_metrics, web_server_metrics]],\n    '75th_Percentile': [metric[3][2] for metric in [web_rtc_metrics, sipp_metrics, web_server_metrics]]\n})\nprint(user_behavior_df)"}], "is_classification": false}
{"id": "seed_task_20", "name": "Calculate and Visualize QoS Metrics", "instruction": "Create a Python script using pandas and matplotlib to calculate and visualize Quality of Service (QoS) metrics for a 5G LTE network traffic dataset. Focus on analyzing jitter, CQI, and throughput for each User Equipment. Calculate the average and standard deviation for these metrics, and plot them in bar charts with error bars representing the standard deviation.", "instances": [{"input": "5G_data/ue-lte-network-traffic-stats.csv. Columns used for analysis: 'UE1-Jitter', 'UE2-Jitter', 'UE3-Jitter', 'UE1-CQI', 'UE2-CQI', 'UE3-CQI', 'UE1: web-rtc', 'UE1: sipp', 'UE1: web-server', 'UE2: web-rtc', 'UE2: sipp', 'UE2: web-server', 'UE3: web-rtc', 'UE3: sipp', 'UE3: web-server'", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('5G_data/ue-lte-network-traffic-stats.csv')\njitter_columns = [col for col in df.columns if 'Jitter' in col]\ncqi_columns = [col for col in df.columns if 'CQI' in col]\nthroughput_columns = [col for col in df.columns if 'web-rtc' in col or 'sipp' in col or 'web-server' in col]\ndef calculate_avg_std(df, columns):\n    avg_std = {}\n    for col in columns:\n        avg_std[col] = {\n            'Average': df[col].mean(),\n            'Std_Dev': df[col].std()\n        }\n    return avg_std\navg_std_jitter = calculate_avg_std(df, jitter_columns)\navg_std_cqi = calculate_avg_std(df, cqi_columns)\navg_std_throughput = calculate_avg_std(df, throughput_columns)\ndef plot_metrics(avg_std_dict, title, ylabel):\n    fig, ax = plt.subplots(figsize=(10, 6))\n    metrics = avg_std_dict.keys()\n    averages = [avg_std_dict[metric]['Average'] for metric in metrics]\n    errors = [avg_std_dict[metric]['Std_Dev'] for metric in metrics]\n    ax.bar(metrics, averages, yerr=errors, align='center', alpha=0.7, ecolor='black', capsize=10)\n    ax.set_ylabel(ylabel)\n    ax.set_title(title)\n    ax.yaxis.grid(True)\n    plt.tight_layout()\n    plt.show()\nplot_metrics(avg_std_jitter, 'Average Jitter with Standard Deviation', 'Jitter (ms)')\nplot_metrics(avg_std_cqi, 'Average CQI with Standard Deviation', 'CQI')\nplot_metrics(avg_std_throughput, 'Average Throughput with Standard Deviation', 'Throughput')"}], "is_classification": false}
{"id": "seed_task_21", "name": "Calculate QoS Metrics and Store in DataFrame", "instruction": "Develop a Python script using pandas to compute Quality of Service (QoS) metrics such as jitter, CQI, and throughput from a 5G LTE network traffic dataset. The script should calculate the average and standard deviation for these metrics across different User Equipment categories. Store the results into a DataFrame, ensuring each metric is associated with its average and standard deviation.", "instances": [{"input": "5G_data/ue-lte-network-traffic-stats.csv. Columns used for analysis: 'UE1-Jitter', 'UE2-Jitter', 'UE3-Jitter', 'UE1-CQI', 'UE2-CQI', 'UE3-CQI', 'UE1: web-rtc', 'UE1: sipp', 'UE1: web-server', 'UE2: web-rtc', 'UE2: sipp', 'UE2: web-server', 'UE3: web-rtc', 'UE3: sipp', 'UE3: web-server'", "output": "import pandas as pd\ndf = pd.read_csv('5G_data/ue-lte-network-traffic-stats.csv')\njitter_columns = [col for col in df.columns if 'Jitter' in col]\ncqi_columns = [col for col in df.columns if 'CQI' in col]\nthroughput_columns = [col for col in df.columns if 'web-rtc' in col or 'sipp' in col or 'web-server' in col]\ndef calculate_avg_std(df, columns):\n    metrics_data = []\n    for col in columns:\n        average = df[col].mean()\n        std_dev = df[col].std()\n        metrics_data.append({'Metric': col, 'Average': average, 'Standard_Deviation': std_dev})\n    return metrics_data\navg_std_jitter = calculate_avg_std(df, jitter_columns)\navg_std_cqi = calculate_avg_std(df, cqi_columns)\navg_std_throughput = calculate_avg_std(df, throughput_columns)\nall_metrics_data = avg_std_jitter + avg_std_cqi + avg_std_throughput\nmetrics_df = pd.DataFrame(all_metrics_data)"}], "is_classification": false}
