{"id": "seed_task_0", "name": "5G Network Performance KPIs", "instruction": "Generate Python code to calculate and visualize 5G network performance KPIs: Capacity Utilization, Cost Efficiency, and Service Penetration. Load data from '5G_Infrastructure/demand_driven_postcode_data_results.csv'. Use keywords: 'capacity', 'cost', 'area', 'numpoints' to identify relevant columns.", "instances": [{"input": "5G infrastructure data from '5G_Infrastructure/demand_driven_postcode_data_results.csv'. Keywords: 'capacity', 'cost', 'area', 'numpoints'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('5G_Infrastructure/demand_driven_postcode_data_results.csv')\ncapacity_columns = [col for col in df.columns if 'capacity' in col.lower()]\ncost_columns = [col for col in df.columns if 'cost' in col.lower()]\narea_columns = [col for col in df.columns if 'area' in col.lower()]\npoints_columns = [col for col in df.columns if 'numpoints' in col.lower()]\nassert 'Spectrum.capacity' in capacity_columns and 'Small.cells.capacity' in capacity_columns, \"Required capacity columns missing.\"\nassert 'Cost.per.km2' in cost_columns, \"Required cost column missing.\"\ndf['Total.capacity'] = df['Spectrum.capacity'] + df['Small.cells.capacity']\ndf['Capacity.utilization'] = (df['Total.capacity'] - df.get('Capacity.surplus', 0)) / df['Total.capacity']\ndf['Cost.efficiency'] = df['Cost.per.km2'] / df['Total.capacity']\ndf['Service.penetration'] = df.get('NUMPOINTS', 0) / df.get('Shape_Area_km2', 1)\nplt.figure(figsize=(15, 5))\nplt.subplot(1, 3, 1)\nplt.bar(df.index, df['Capacity.utilization'], color='skyblue')\nplt.xlabel('Index')\nplt.ylabel('Capacity Utilization')\nplt.title('Capacity Utilization per Entry')\nplt.subplot(1, 3, 2)\nplt.bar(df.index, df['Cost.efficiency'], color='lightgreen')\nplt.xlabel('Index')\nplt.ylabel('Cost Efficiency (Cost per km² / Total capacity)')\nplt.title('Cost Efficiency per Entry')\nplt.subplot(1, 3, 3)\nplt.bar(df.index, df['Service.penetration'], color='salmon')\nplt.xlabel('Index')\nplt.ylabel('Service Penetration (NUMPOINTS / Area)')\nplt.title('Service Penetration per Entry')\nplt.tight_layout()\nplt.show()"}]}
{"id": "seed_task_1", "name": "5G Network Performance KPIs", "instruction": "Generate Python code to calculate and visualize 5G network performance KPIs: Total Network Capacity, Capacity per Area, Capacity per Point, Cost per Capacity, Cost per Area, and Surplus per Area. Load data from '5G_Infrastructure/demand_driven_postcode_data_results.csv'. Use keywords: 'capacity', 'cost', 'area', 'numpoints' to identify relevant columns.", "instances": [{"input": "5G infrastructure data from '5G_Infrastructure/demand_driven_postcode_data_results.csv'. Keywords: 'capacity', 'cost', 'area', 'numpoints'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load the CSV file 'data.csv' into a pandas DataFrame\ndf = pd.read_csv('5G_Infrastructure/demand_driven_postcode_data_results.csv')\n\n# Identifying relevant columns using keywords\ncapacity_columns = [col for col in df.columns if 'capacity' in col.lower()]\ncost_columns = [col for col in df.columns if 'cost' in col.lower()]\narea_columns = [col for col in df.columns if 'area' in col.lower()]\npoints_columns = [col for col in df.columns if 'numpoints' in col.lower()]\n\n# Handle NaN values in relevant columns\ndf[capacity_columns + cost_columns + area_columns + points_columns] = df[capacity_columns + cost_columns + area_columns + points_columns].fillna(0)\n\n# Ensure the necessary columns for calculations are present\nassert 'Spectrum.capacity' in df.columns and 'Small.cells.capacity' in df.columns, \"Required capacity columns missing.\"\nassert 'Cost' in df.columns and 'Cost.per.km2' in df.columns, \"Required cost columns missing.\"\nassert 'NUMPOINTS' in df.columns and 'Shape_Area_km2' in df.columns, \"Required points and area columns missing.\"\n\n# Calculate capacity related KPIs using specific columns\ndf['Total.capacity'] = df['Spectrum.capacity'] + df['Small.cells.capacity']\ndf['Capacity.per.area'] = df['Total.capacity'] / df['Shape_Area_km2']\ndf['Capacity.per.point'] = df['Total.capacity'] / df['NUMPOINTS']\n\n# Calculate cost related KPIs using specific columns\ndf['Cost.per.capacity'] = df['Cost'] / df['Total.capacity']\ndf['Cost.per.area'] = df['Cost.per.km2'] * df['Shape_Area_km2']\n\n# Calculate surplus related KPIs using identified columns\ndf['Surplus.per.area'] = df['Capacity.surplus'] / df['Shape_Area_km2']\n\n# Perform 5G performance analysis\ndf_performance = df\n\n# Now let's generate plots for some of these KPIs\nfig, axes = plt.subplots(nrows=3, ncols=2, figsize=(14, 15))\n\n# Plot each KPI by index\ntitles = ['Total Network Capacity', 'Capacity per Area', 'Capacity per Point', \n          'Cost per Capacity', 'Cost per Area', 'Surplus per Area']\ny_labels = ['Capacity (Mbps)', 'Capacity/Area (Mbps/km²)', 'Capacity/Point (Mbps/Point)', \n            'Cost/Capacity (Currency/Mbps)', 'Cost/Area (Currency/km²)', 'Surplus/Area (Mbps/km²)']\ncolumns = ['Total.capacity', 'Capacity.per.area', 'Capacity.per.point', \n           'Cost.per.capacity', 'Cost.per.area', 'Surplus.per.area']\n\nfor ax, title, y_label, col in zip(axes.flatten(), titles, y_labels, columns):\n    ax.bar(df_performance.index, df_performance[col], color='skyblue')\n    ax.set_title(title)\n    ax.set_xlabel('Index')\n    ax.set_ylabel(y_label)\n\nplt.tight_layout()\nplt.show()\n\n# Output the performance DataFrame\nprint(df_performance[columns])"}]}
{"id": "seed_task_2", "name": "5G Performance Analysis by Geotype", "instruction": "Write Python code to load a CSV file 'data.csv'categorize columns based on specific keywords ('capacity', 'cost', 'area'), and perform 5G performance analysis by geotype. Generate plots for each KPI (Key Performance Indicator) by geotype.", "instances": [{"input": "Load 5G infrastructure data from '5G_Infrastructure/demand_driven_postcode_data_results.csv'. Categorize columns based on keywords: 'capacity', 'cost', 'area'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ncell_infrastruct = pd.read_csv(\"5G_Infrastructure/demand_driven_postcode_data_results.csv\")\ncapacity_columns = [col for col in cell_infrastruct.columns if 'capacity' in col.lower()]\ncost_columns = [col for col in cell_infrastruct.columns if 'cost' in col.lower()]\narea_columns = [col for col in cell_infrastruct.columns if 'area' in col.lower()]\n\ndef analyze_5g_performance_by_geotype(df):\n    numeric_cols = capacity_columns + cost_columns + area_columns\n    for col in numeric_cols:\n        df[col] = pd.to_numeric(df[col], errors='coerce')\n    df.fillna(0, inplace=True)\n    grouped = df.groupby('geotype').mean().reset_index()\n    return grouped\n\ndf_performance_by_geotype = analyze_5g_performance_by_geotype(cell_infrastruct)\n\nfig, axes = plt.subplots(nrows=3, ncols=2, figsize=(14, 15), constrained_layout=True)\ncolors = ['skyblue', 'orange', 'green', 'red', 'purple', 'teal']\nfor i, (column, color) in enumerate(zip(capacity_columns + cost_columns + area_columns, colors)):\n    ax = axes.flatten()[i]\n    ax.bar(df_performance_by_geotype['geotype'], df_performance_by_geotype[column], color=color)\n    ax.set_title(column.replace('.', ' ').title())\n    ax.set_xlabel('Geotype')\n    ax.set_ylabel(column)\n    ax.tick_params(labelrotation=45)\n\nplt.show()"}]}
{"id": "seed_task_3", "name": "5G Per User Capacity Increase Analysis", "instruction": "Write Python code to load a CSV file 'data.csv'categorize columns based on specific keywords ('spectrum.capacity', 'small.cells.capacity', 'numpoints'), and calculate the per user capacity increase due to 5G spectrum bands. Plot the per user capacity increase and mark the threshold where small cells are needed.", "instances": [{"input": "Load the reduced CSV file 'data.csv' into a pandas DataFrame. Categorize columns based on keywords: 'spectrum.capacity', 'small.cells.capacity', 'numpoints'.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv('5G_Infrastructure/demand_driven_postcode_data_results.csv')\nspectrum_columns = [col for col in df.columns if 'spectrum.capacity' in col.lower()]\nsmall_cells_columns = [col for col in df.columns if 'small.cells.capacity' in col.lower()]\nnum_points_columns = [col for col in df.columns if 'numpoints' in col.lower()]\n\ndef calculate_per_user_capacity_increase(df):\n    df['per_user_capacity_LTE'] = df[spectrum_columns].sum(axis=1) / df[num_points_columns].sum(axis=1)\n    df['per_user_capacity_5G'] = (df[spectrum_columns].sum(axis=1) + df[small_cells_columns].sum(axis=1)) / df[num_points_columns].sum(axis=1)\n    df['per_user_capacity_increase'] = df['per_user_capacity_5G'] - df['per_user_capacity_LTE']\n    return df\n\ndf = calculate_per_user_capacity_increase(df)\n\nplt.figure(figsize=(10, 6))\nplt.plot(df.index, df['per_user_capacity_increase'], label='Per User Capacity Increase')\nplt.axhline(y=5000, color='r', linestyle='--', label='Threshold for Small Cells')\nplt.title('Per User Capacity Increase with 5G Spectrum Bands')\nplt.xlabel('Index')\nplt.ylabel('Capacity Increase (Mbps)')\nplt.legend()\nplt.show()"}]}
{"id": "seed_task_4", "name": "5G Per User Capacity Increase Analysis", "instruction": "Write Python code to load a CSV file 'data.csv'automatically detect relevant columns by keyword ('capacity', 'spectrum', 'small.cells', 'numpoints'), and calculate the per user capacity increase due to 5G spectrum bands. Group by 'geotype' and calculate the mean per user capacity increase for each geotype. Plot the per user capacity increase by geotype.", "instances": [{"input": "Load the CSV file 'data.csv' into a pandas DataFrame. Automatically detect relevant columns by keyword. Define a function to calculate per user capacity increase. Apply the function to the DataFrame. Group by 'geotype' and calculate the mean per user capacity increase for each geotype. Define colors for plotting.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndf = pd.read_csv('5G_Infrastructure/demand_driven_postcode_data_results.csv')\ncapacity_columns = [col for col in df.columns if 'capacity' in col.lower()]\nspectrum_capacity_column = [col for col in capacity_columns if 'spectrum' in col.lower()][0]\nsmall_cells_capacity_column = [col for col in capacity_columns if 'small.cells' in col.lower()][0]\nnum_points_column = [col for col in df.columns if 'numpoints' in col.lower()][0]\n\ndef calculate_per_user_capacity_increase(df):\n    df['per_user_capacity_LTE'] = df[spectrum_capacity_column] / df[num_points_column]\n    df['per_user_capacity_5G'] = (df[spectrum_capacity_column] + df[small_cells_capacity_column]) / df[num_points_column]\n    df['per_user_capacity_increase'] = df['per_user_capacity_5G'] - df['per_user_capacity_LTE']\n    return df\n\ndf = calculate_per_user_capacity_increase(df)\ngeotype_column = [col for col in df.columns if 'geotype' in col.lower()][0]\ndf_grouped = df.groupby(geotype_column).mean().reset_index()\ncolors = ['red', 'green', 'blue', 'cyan', 'magenta', 'yellow', 'black', 'orange', 'purple', 'brown', 'pink', 'gray', 'olive']\ncolors *= (len(df_grouped[geotype_column]) // len(colors) + 1)\n\nplt.figure(figsize=(10, 6))\nfor i, row in df_grouped.iterrows():\n    plt.bar(row[geotype_column], row['per_user_capacity_increase'], color=colors[i], label=row[geotype_column])\n\nplt.title('Per User Capacity Increase with 5G Spectrum Bands by Geotype')\nplt.xlabel('Geotype')\nplt.ylabel('Capacity Increase (Mbps)')\nplt.xticks(rotation=45)\nplt.legend(title='Geotype', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()"}]}
{"id": "seed_task_5", "name": "5G Average Traffic per User Analysis", "instruction": "Write Python code to load a CSV file 'data.csv'detect relevant columns by keywords, calculate the average traffic per user for LTE and 5G, and plot the results by 'geotype' for comparison.", "instances": [{"input": "Load the CSV file 'data.csv' into a pandas DataFrame. Detect relevant columns by keywords. Ensure at least one column for each category. Select the first column from each category. Remove rows with no connection points to avoid division by zero.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndf = pd.read_csv('5G_Infrastructure/demand_driven_postcode_data_results.csv')\nspectrum_capacity_columns = [col for col in df.columns if 'spectrum.capacity' in col.lower()]\nsmall_cells_capacity_columns = [col for col in df.columns if 'small.cells.capacity' in col.lower()]\nnum_points_columns = [col for col in df.columns if 'numpoints' in col.lower()]\ngeotype_columns = [col for col in df.columns if 'geotype' in col.lower()]\nassert spectrum_capacity_columns and small_cells_capacity_columns and num_points_columns and geotype_columns, \"Required columns not found.\"\nspectrum_capacity_column = spectrum_capacity_columns[0]\nsmall_cells_capacity_column = small_cells_capacity_columns[0]\nnum_points_column = num_points_columns[0]\ngeotype_column = geotype_columns[0]\ndf = df[df[num_points_column] > 0]\ndf['per_user_traffic_LTE'] = df.apply(lambda row: row[spectrum_capacity_column] / row[num_points_column] if row[num_points_column] > 0 else 0, axis=1)\ndf['per_user_traffic_5G'] = df.apply(lambda row: (row[spectrum_capacity_column] + row[small_cells_capacity_column]) / row[num_points_column] if row[num_points_column] > 0 else 0, axis=1)\ngrouped_traffic = df.groupby(geotype_column).agg({'per_user_traffic_LTE': 'mean', 'per_user_traffic_5G': 'mean'}).reset_index()\nfig, ax = plt.subplots(figsize=(12, 7))\nbar_width = 0.35\nr1 = np.arange(len(grouped_traffic))\nr2 = [x + bar_width for x in r1]\nax.bar(r1, grouped_traffic['per_user_traffic_LTE'], color='blue', width=bar_width, label='LTE')\nax.bar(r2, grouped_traffic['per_user_traffic_5G'], color='orange', width=bar_width, label='5G')\nax.set_xlabel('Geotype')\nax.set_ylabel('Average Traffic per User (Mbps)')\nax.set_title('Average Traffic per User by Geotype for LTE vs 5G')\nax.set_xticks([r + bar_width / 2 for r in r1])\nax.set_xticklabels(grouped_traffic['geotype'], rotation=45)\nax.legend()\nplt.tight_layout()\nplt.show()"}]}
{"id": "seed_task_6", "name": "5G Average Traffic per User Analysis", "instruction": "Write Python code to load a CSV file 'data.csv'detect relevant columns by keywords, calculate the average traffic per user for LTE and 5G, and plot the results by 'geotype' for comparison. Separate the data into two groups based on 'spectrum_limitations' and plot separately for 'all_spectrum' and 'Limited Spectrum Bands'.", "instances": [{"input": "Load the CSV file 'data.csv' into a pandas DataFrame. Detect relevant columns by keywords. Ensure all necessary columns are found. Calculate per user traffic level for LTE and 5G. Separate the DataFrame into two based on 'spectrum_limitations'. Group by 'geotype' and calculate the mean per user traffic for both groups.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n# Load the CSV file 'data.csv' into a pandas DataFrame\n# Detect relevant columns by keywords\n# Ensure all necessary columns are found\n# Calculate per user traffic level for LTE and 5G\n# Separate the DataFrame into two based on 'spectrum_limitations'\n# Group by 'geotype' and calculate the mean per user traffic for both groups\n# Plot the data for 'all_spectrum'\n# Set the width of the bars\n# Set the positions of the bars on the x-axis\n# Make the bars for 'all_spectrum'\n# Label the plot\n# Plot the data for 'Limited Spectrum Bands'\n# Set the width of the bars\n# Set the positions of the bars on the x-axis\n# Make the bars for 'Limited Spectrum Bands'\n# Label the plot\nplt.tight_layout()\nplt.show()"}]}
{"id": "seed_task_7", "name": "5G Investment Cost Analysis", "instruction": "Write Python code to load a CSV file 'data.csv'detect relevant columns by keywords, calculate the investment cost per user, and plot the results by 'geotype' for comparison. Ensure all necessary columns are found, convert relevant columns to numeric, handle NaN values, and calculate the investment cost per user.", "instances": [{"input": "Load the CSV file 'data.csv' into a pandas DataFrame. Detect relevant columns by keywords. Ensure all necessary columns are found. Convert relevant columns to numeric, replacing non-numeric values with NaN. Fill NaN values that result from non-numeric data or division by zero with zeros. Ensure there are no rows with NUMPOINTS equal to zero to avoid division by zero. Calculate investment cost per user. Group by geotype and calculate the mean investment cost per user for each geotype.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\ndf = pd.read_csv('5G_Infrastructure/demand_driven_postcode_data_results.csv')\ncost_column = next((col for col in df.columns if 'cost' in col.lower()), None)\nnum_points_column = next((col for col in df.columns if 'numpoints' in col.lower()), None)\ngeotype_column = next((col for col in df.columns if 'geotype' in col.lower()), None)\nassert all([cost_column, num_points_column, geotype_column]), \"Required columns not found.\"\nfor column in [cost_column, num_points_column]:\n    df[column] = pd.to_numeric(df[column], errors='coerce')\ndf.fillna(0, inplace=True)\ndf = df[df[num_points_column] > 0]\ndf['Investment.cost.per.user'] = df[cost_column] / df[num_points_column]\ninvestment_cost_by_geotype = df.groupby(geotype_column).agg({'Investment.cost.per.user': 'mean'}).reset_index()\ncolors = plt.cm.viridis(np.linspace(0, 1, len(investment_cost_by_geotype)))\nplt.figure(figsize=(10, 6))\nfor i, row in investment_cost_by_geotype.iterrows():\n    plt.bar(row[geotype_column], row['Investment.cost.per.user'], color=colors[i], label=str(row[geotype_column]))\nplt.title('Average Investment Cost per User by Geotype')\nplt.xlabel('Geotype')\nplt.ylabel('Investment Cost per User (Currency)')\nplt.xticks(rotation=45)\nplt.legend(title='Geotype', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()"}]}
{"id": "seed_task_8", "name": "5G Network Traffic Analysis", "instruction": "Write Python code to load a CSV file 'data.csv' categorize columns into traffic, jitter, and CQI, and plot the results for each category. Create subplots for Traffic Volume, Jitter, and CQI analyses, and plot each relevant column in the corresponding subplot.", "instances": [{"input": "Load the CSV file 'data.csv' into a pandas DataFrame. Categorize columns into traffic, jitter, and CQI. Create subplots for Traffic Volume, Jitter, and CQI analyses. Plot each relevant column in the corresponding subplot.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv(\"5G_data/ue-lte-network-traffic-stats.csv\")\ntraffic_columns = [col for col in df.columns if 'web-rtc' in col or 'sipp' in col or 'web-server' in col]\njitter_columns = [col for col in df.columns if 'Jitter' in col]\ncqi_columns = [col for col in df.columns if 'CQI' in col]\nplt.figure(figsize=(15, 15))\nplt.subplot(3, 1, 1)\nfor col in traffic_columns:\n    plt.plot(df.index, df[col], label=col)\nplt.title('Traffic Volume Analysis')\nplt.xlabel('Index')\nplt.ylabel('Volume')\nplt.legend()\nplt.subplot(3, 1, 2)\nfor col in jitter_columns:\n    plt.plot(df.index, df[col], label=col)\nplt.title('Jitter Analysis')\nplt.xlabel('Index')\nplt.ylabel('Jitter (ms)')\nplt.legend()\nplt.subplot(3, 1, 3)\nfor col in cqi_columns:\n    plt.plot(df.index, df[col], label=col)\nplt.title('CQI Analysis')\nplt.xlabel('Index')\nplt.ylabel('CQI')\nplt.legend()\nplt.tight_layout()\nplt.show()"}]}
{"id": "seed_task_9", "name": "5G UE Traffic Volume Analysis", "instruction": "Write Python code to load a CSV file 'data.csv' define applications, and plot the traffic volume for each UE and application. Iterate over UEs and applications to create separate plots. Ensure each plot has appropriate labels and a legend.", "instances": [{"input": "Load the dataset. Define applications. Plot traffic volume for each UE and application.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv(\"5G_data/ue-lte-network-traffic-stats.csv\")\napplications = ['web-rtc', 'sipp', 'web-server']\nfor ue in range(1, 4):\n    plt.figure(figsize=(10, 6))\n    for app in applications:\n        traffic_col = f'UE{ue}: {app}'\n        plt.plot(df.index, df[traffic_col], label=f'{app}')\n    plt.title(f'Traffic Volume for UE{ue}')\n    plt.xlabel('Index')\n    plt.ylabel('Traffic Volume')\n    plt.legend()\n    plt.grid(True)\n    plt.show()"}]}
{"id": "seed_task_10", "name": "5G UE Traffic Volume Box Plot", "instruction": "Write Python code to load a CSV file 'data.csv' define services, and create box plots to analyze traffic volume for each service across different UEs. Iterate over services to create separate box plots. Ensure each box plot has appropriate labels.", "instances": [{"input": "Load the dataset. Define the services. Create a figure with multiple subplots. Iterate over services to plot traffic volume for each.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv(\"5G_data/ue-lte-network-traffic-stats.csv\")\nservices = ['web-rtc', 'sipp', 'web-server']\nfig, axes = plt.subplots(len(services), 1, figsize=(15, 15))\nfor i, service in enumerate(services):\n    service_columns = [f'UE{ue}: {service}' for ue in range(1, 4)]\n    service_data = [df[col].dropna() for col in service_columns]\n    ax = axes[i]\n    ax.boxplot(service_data, labels=[f'UE{ue}' for ue in range(1, 4)])\n    ax.set_title(f'Traffic Volume Analysis for {service.title()}')\n    ax.set_ylabel('Volume')\n    ax.grid(True)\nplt.tight_layout()\nplt.show()"}]}
{"id": "seed_task_11", "name": "5G UE Peak Traffic Volume Analysis", "instruction": "Write Python code to load a CSV file 'data.csv' define a function to find and plot peaks in traffic volume for each UE and service, and call the function for 3 UEs and 3 services ('web-rtc', 'sipp', 'web-server'). Ensure each UE has a separate figure, and label the peaks accordingly.", "instances": [{"input": "Load the dataset. Define a function to find and plot peaks in traffic volume for each UE and service. Call the function for 3 UEs and 3 services ('web-rtc', 'sipp', 'web-server').", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.signal import find_peaks\ndf = pd.read_csv(\"5G_data/ue-lte-network-traffic-stats.csv\")\n\ndef find_and_plot_peaks(df, ues, services):\n    color_dict = {'web-rtc': 'blue', 'sipp': 'green', 'web-server': 'red'}\n\n    for ue in ues:\n        plt.figure(figsize=(10, 5))\n        for service in services:\n            col_name = f'{ue}: {service}'\n            traffic_mean = df[col_name].mean()\n            traffic_std = df[col_name].std()\n            peaks, _ = find_peaks(df[col_name], height=(traffic_mean + traffic_std))\n            plt.scatter(peaks, df[col_name].iloc[peaks], color=color_dict[service], label=f'{ue} {service}')\n\n        plt.title(f'Peak Traffic Volume Analysis for {ue}')\n        plt.xlabel('Sample Index')\n        plt.ylabel('Traffic Volume')\n        plt.legend()\n        plt.show()\n\nues = ['UE1', 'UE2', 'UE3']\nservices = ['web-rtc', 'sipp', 'web-server']\nfind_and_plot_peaks(df, ues, services)"}]}
{"id": "seed_task_12", "name": "5G UE Network Performance Analysis", "instruction": "Write Python code to load a a CSV file 'data.csv', define columns for traffic, jitter, and CQI, and create box plots to analyze these metrics. Ensure each metric has a separate box plot. Label the plots appropriately.", "instances": [{"input": "Load the dataset. Define columns for traffic, jitter, and CQI. Create box plots for each metric separately.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv(\"5G_data/ue-lte-network-traffic-stats.csv\")\ntraffic_columns = [col for col in df.columns if 'web-rtc' in col or 'sipp' in col or 'web-server' in col]\njitter_columns = [col for col in df.columns if 'Jitter' in col]\ncqi_columns = [col for col in df.columns if 'CQI' in col]\nplt.figure(figsize=(15, 15))\nplt.subplot(3, 1, 2)\njitter_data = [df[col].dropna() for col in jitter_columns]\nplt.boxplot(jitter_data, labels=jitter_columns)\nplt.title('Jitter Analysis')\nplt.ylabel('Jitter (ms)')\nplt.subplot(3, 1, 3)\ncqi_data = [df[col].dropna() for col in cqi_columns]\nplt.boxplot(cqi_data, labels=cqi_columns)\nplt.title('CQI Analysis')\nplt.ylabel('CQI')\nplt.tight_layout()\nplt.show()"}]}
{"id": "seed_task_13", "name": "5G UE Network Performance Analysis", "instruction": "Write Python code to load a a CSV file 'data.csv', calculate the mean values for traffic volume, jitter, and CQI for each UE, and create separate bar plots to visualize the means. Ensure each metric has a separate plot, and label the plots appropriately.", "instances": [{"input": "Load the CSV file 'data.csv' into a pandas DataFrame. Calculate the mean values for traffic volume, jitter, and CQI for each UE. Create separate bar plots to visualize the means for each metric.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv(\"5G_data/ue-lte-network-traffic-stats.csv\")\nmean_traffic = {}\nmean_jitter = {}\nmean_cqi = {}\ntraffic_columns = [col for col in df.columns if 'web-rtc' in col or 'sipp' in col or 'web-server' in col]\njitter_columns = [col for col in df.columns if 'Jitter' in col]\ncqi_columns = [col for col in df.columns if 'CQI' in col]\nfor i in range(1, 4):\n    ue_traffic_cols = [col for col in traffic_columns if f'UE{i}' in col]\n    ue_jitter_col = f'UE{i}-Jitter'\n    ue_cqi_col = f'UE{i}-CQI'\n    mean_traffic[f'UE{i}'] = df[ue_traffic_cols].mean().mean()\n    mean_jitter[f'UE{i}'] = df[ue_jitter_col].mean()\n    mean_cqi[f'UE{i}'] = df[ue_cqi_col].mean()\nplt.figure(figsize=(10, 5))\nplt.bar(mean_traffic.keys(), mean_traffic.values(), color='skyblue')\nplt.title('Mean Traffic Volume by UE')\nplt.xlabel('UE')\nplt.ylabel('Traffic Volume')\nplt.show()\nplt.figure(figsize=(10, 5))\nplt.bar(mean_jitter.keys(), mean_jitter.values(), color='orange')\nplt.title('Mean Jitter by UE')\nplt.xlabel('UE')\nplt.ylabel('Jitter')\nplt.show()\nplt.figure(figsize=(10, 5))\nplt.bar(mean_cqi.keys(), mean_cqi.values(), color='green')\nplt.title('Mean CQI by UE')\nplt.xlabel('UE')\nplt.ylabel('CQI')\nplt.show()"}]}
{"id": "seed_task_14", "name": "5G UE Network Traffic Analysis", "instruction": "Write Python code to load a a CSV file 'data.csv', calculate the mean values of traffic volume for each UE and for each application category ('web-rtc', 'sipp', 'web-server'), and create separate bar plots to visualize the means for each UE. Ensure that each UE has a separate plot, and label the plots appropriately.", "instances": [{"input": "Load the CSV file 'data.csv' into a pandas DataFrame. Calculate the mean values of traffic volume for each UE and for each application category. Create separate bar plots to visualize the means for each UE.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv(\"5G_data/ue-lte-network-traffic-stats.csv\")\nmeans_by_ue = {}\napplications = ['web-rtc', 'sipp', 'web-server']\nfor i in range(1, 4):\n    ue_data = {}\n    for app in applications:\n        column_name = f'UE{i}: {app}'\n        ue_data[app] = df[column_name].mean()\n    means_by_ue[f'UE{i}'] = ue_data\nfig, axes = plt.subplots(1, 3, figsize=(15, 5), sharey=True)\nfor i, (ue, ue_data) in enumerate(means_by_ue.items(), 1):\n    axes[i - 1].bar(ue_data.keys(), ue_data.values())\n    axes[i - 1].set_title(f'Mean Traffic for {ue}')\n    axes[i - 1].set_xlabel('Application Category')\n    axes[i - 1].set_ylabel('Mean Traffic Volume')\nplt.tight_layout()\nplt.show()"}]}
{"id": "seed_task_15", "name": "5G UE Network Jitter and CQI Analysis", "instruction": "Write Python code to load a a CSV file 'data.csv', calculate the mean values of jitter and CQI for each UE, and create separate bar plots to visualize the means for each UE. Ensure that each metric (jitter and CQI) has a separate plot, and label the plots appropriately.", "instances": [{"input": "Load the CSV file 'data.csv' into a pandas DataFrame. Calculate the mean values of jitter and CQI for each UE. Create separate bar plots to visualize the means for each UE.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv(\"5G_data/ue-lte-network-traffic-stats.csv\")\nmean_jitters = []\nmean_cqis = []\nfor i in range(1, 4):\n    mean_jitters.append(df[f'UE{i}-Jitter'].mean())\n    mean_cqis.append(df[f'UE{i}-CQI'].mean())\nplt.figure(figsize=(10, 5))\nplt.bar(['UE1', 'UE2', 'UE3'], mean_jitters, color=['red', 'green', 'blue'])\nplt.title('Mean Jitter for Each UE')\nplt.xlabel('User Equipment')\nplt.ylabel('Jitter (ms)')\nplt.show()\nplt.figure(figsize=(10, 5))\nplt.bar(['UE1', 'UE2', 'UE3'], mean_cqis, color=['red', 'green', 'blue'])\nplt.title('Mean CQI for Each UE')\nplt.xlabel('User Equipment')\nplt.ylabel('CQI')\nplt.show()"}]}
{"id": "seed_task_16", "name": "5G UE Jitter Volatility Analysis", "instruction": "Write Python code to load a a CSV file 'data.csv', identify columns containing 'Jitter' data, and create a box plot to visualize the jitter volatility for each UE. Ensure that each UE has a separate box in the plot, and label the plot appropriately.", "instances": [{"input": "Load the CSV file 'data.csv' into a pandas DataFrame. Identify columns containing 'Jitter' data. Create a box plot to visualize the jitter volatility for each UE.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv(\"5G_data/ue-lte-network-traffic-stats.csv\")\njitter_columns = [col for col in df.columns if 'Jitter' in col]\ndata_to_plot = [df[col].dropna() for col in jitter_columns]\nplt.figure(figsize=(14, 6))\nplt.boxplot(data_to_plot, labels=jitter_columns)\nplt.title('Jitter Volatility Analysis (Box Plot)')\nplt.xlabel('User Equipment')\nplt.ylabel('Jitter (ms)')\nplt.grid(True)\nplt.show()"}]}
{"id": "seed_task_17", "name": "5G UE Jitter Analysis with Outliers", "instruction": "Write Python code to load a a CSV file 'data.csv', identify columns containing 'Jitter' data, and create a scatter plot to visualize the jitter data for each UE. Additionally, identify and emphasize the outliers in the plot using a different marker or color.", "instances": [{"input": "Load the CSV file 'data.csv' into a pandas DataFrame. Identify columns containing 'Jitter' data. Create a scatter plot to visualize the jitter data for each UE. Emphasize outliers in the plot using a different marker or color.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv(\"5G_data/ue-lte-network-traffic-stats.csv\")\n\n# Function to find outliers using the Interquartile Range (IQR) method\n\ndef find_outliers_iqr(df, column):\n    Q1 = df[column].quantile(0.25)\n    Q3 = df[column].quantile(0.75)\n    IQR = Q3 - Q1\n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n    return df[(df[column] < lower_bound) | (df[column] > upper_bound)]\n\njitter_columns = [col for col in df.columns if 'Jitter' in col]\n\nplt.figure(figsize=(14, 6))\n\nfor col in jitter_columns:\n    plt.scatter(df.index, df[col], alpha=0.5, s=10, label=f'{col} Jitter')\n    outliers = find_outliers_iqr(df, col)\n    plt.scatter(outliers.index, outliers[col], color='red', s=50, marker='D', label=f'{col} Outliers')\n\nplt.title('Jitter Analysis with Emphasized Outliers')\nplt.xlabel('Time Index')\nplt.ylabel('Jitter (ms)')\nplt.legend()\nplt.grid(True)\nplt.show()"}]}
{"id": "seed_task_18", "name": "5G UE Throughput Analysis", "instruction": "Write Python code to load a a CSV file 'data.csv', dynamically identify columns for each application ('web-rtc', 'sipp', 'web-server'), and perform a Throughput Analysis by summing the data throughput for each application across all UEs. Plot the results in a bar chart.", "instances": [{"input": "Load the CSV file 'data.csv' into a pandas DataFrame. Dynamically identify columns for each application. Perform a Throughput Analysis by summing the data throughput for each application across all UEs. Plot the results in a bar chart.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv(\"5G_data/ue-lte-network-traffic-stats.csv\")\napplications = ['web-rtc', 'sipp', 'web-server']\napplication_columns = {app: [col for col in df.columns if app in col] for app in applications}\nthroughput_data = {}\nfor app, cols in application_columns.items():\n    throughput_data[app] = df[cols].sum().sum()\nplt.figure(figsize=(10, 6))\nplt.bar(throughput_data.keys(), throughput_data.values(), color=['red', 'green', 'blue'])\nplt.title('Throughput Analysis for Each Application')\nplt.xlabel('Application')\nplt.ylabel('Total Data Throughput')\nplt.show()"}]}
{"id": "seed_task_19", "name": "5G UE CQI Assessment with Outliers", "instruction": "Write Python code to load a a CSV file 'data.csv', dynamically identify CQI columns for each UE, create a box plot for CQI assessment, and find and display outliers in a DataFrame. Ensure that the box plot shows the CQI values for each UE.", "instances": [{"input": "Load the CSV file 'data.csv' into a pandas DataFrame. Dynamically identify CQI columns for each UE. Create a box plot for CQI assessment. Find and display outliers in a DataFrame.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv(\"5G_data/ue-lte-network-traffic-stats.csv\")\ncqi_columns = [col for col in df.columns if 'CQI' in col]\nplt.figure(figsize=(14, 6))\ncqi_data = [df[col] for col in cqi_columns]\nplt.boxplot(cqi_data, labels=cqi_columns)\nplt.title('CQI Assessment for Each UE')\nplt.xlabel('User Equipment')\nplt.ylabel('CQI Value')\nplt.grid(True)\nplt.show()\n\ndef find_outliers_iqr(data, column):\n    Q1 = data[column].quantile(0.25)\n    Q3 = data[column].quantile(0.75)\n    IQR = Q3 - Q1\n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n    outliers = data[(data[column] < lower_bound) | (data[column] > upper_bound)]\n    outliers = outliers.copy()\n    outliers['Outlier_Type'] = column\n    return outliers\n\nall_outliers = pd.DataFrame()\nfor col in cqi_columns:\n    outliers = find_outliers_iqr(df, col)\n    all_outliers = pd.concat([all_outliers, outliers])\n\nall_outliers.head()"}]}
{"id": "seed_task_20", "name": "5G UE Jitter and CQI Benchmarking", "instruction": "Write Python code to load a a CSV file 'data.csv', dynamically identify Jitter and CQI columns for each UE, define benchmark values for Jitter (0.01 ms) and CQI (12), calculate the average Jitter and CQI for each UE, and create two subplots for Jitter and CQI benchmarking with benchmark lines. Ensure that the subplots show the benchmark values and labels.", "instances": [{"input": "Load the dataset. Dynamically identify Jitter and CQI columns for each UE. Define the benchmark values. Calculate the average Jitter and CQI for each UE. Create two subplots for Jitter and CQI benchmarking with benchmark lines.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv(\"5G_data/ue-lte-network-traffic-stats.csv\")\njitter_columns = [col for col in df.columns if 'Jitter' in col]\ncqi_columns = [col for col in df.columns if 'CQI' in col]\nbenchmark_jitter = 0.01\nbenchmark_cqi = 12\naverage_jitter = {col: df[col].mean() for col in jitter_columns}\naverage_cqi = {col: df[col].mean() for col in cqi_columns}\nplt.figure(figsize=(14, 6))\nplt.subplot(1, 2, 1)\nplt.bar(average_jitter.keys(), average_jitter.values())\nplt.axhline(y=benchmark_jitter, color='r', linestyle='--', label='Jitter Benchmark')\nplt.ylabel('Average Jitter (ms)')\nplt.title('Jitter Benchmarking by UE')\nplt.legend()\nplt.subplot(1, 2, 2)\nplt.bar(average_cqi.keys(), average_cqi.values())\nplt.axhline(y=benchmark_cqi, color='r', linestyle='--', label='CQI Benchmark')\nplt.ylabel('Average CQI')\nplt.title('CQI Benchmarking by UE')\nplt.legend()\nplt.tight_layout()\nplt.show()"}]}
{"id": "seed_task_21", "name": "5G UE Anomaly Detection", "instruction": "Write Python code to load a a CSV file 'data.csv', dynamically identify columns related to traffic, jitter, and CQI, apply an anomaly detection function using Interquartile Range (IQR) to each category of metrics (traffic, jitter, and CQI), store anomalies in separate columns with '_Anomaly' suffix, count anomalies for each column, and print the anomaly counts.", "instances": [{"input": "Load the CSV file 'data.csv' into a pandas DataFrame. Dynamically identify columns related to traffic, jitter, and CQI. Apply the anomaly detection function using IQR to each category of metrics. Store anomalies in separate columns. Count anomalies for each column and print the counts.", "output": "import pandas as pd\ndf = pd.read_csv(\"5G_data/ue-lte-network-traffic-stats.csv\")\ndef calculate_anomalies(data, factor=1.5):\n    Q1 = data.quantile(0.25)\n    Q3 = data.quantile(0.75)\n    IQR = Q3 - Q1\n    lower_bound = Q1 - factor * IQR\n    upper_bound = Q3 + factor * IQR\n    return data.apply(lambda x: 'Anomaly' if x < lower_bound or x > upper_bound else 'Normal')\ntraffic_columns = [col for col in df.columns if 'web-rtc' in col or 'sipp' in col or 'web-server' in col]\njitter_columns = [col for col in df.columns if 'Jitter' in col]\ncqi_columns = [col for col in df.columns if 'CQI' in col]\nfor col in traffic_columns:\n    df[f'{col}_Anomaly'] = calculate_anomalies(df[col])\nfor col in jitter_columns:\n    df[f'{col}_Anomaly'] = calculate_anomalies(df[col])\nfor col in cqi_columns:\n    df[f'{col}_Anomaly'] = calculate_anomalies(df[col])\nanomaly_columns = [col for col in df.columns if 'Anomaly' in col]\nanomalies_df = df[anomaly_columns]\nanomaly_counts = anomalies_df.apply(lambda x: x.value_counts().get('Anomaly', 0))\nprint(anomaly_counts)"}]}
{"id": "seed_task_22", "name": "5G Application Metrics Calculation", "instruction": "Write Python code to load a a CSV file 'data.csv', dynamically identify columns related to different applications ('web-rtc', 'sipp', 'web-server'), calculate additional metrics for each application (e.g., max traffic, traffic std. dev., high traffic instances, percentiles), and create a DataFrame to store these metrics. Print the resulting DataFrame.", "instances": [{"input": "Load the dataset. Dynamically identify columns related to different applications. Calculate additional metrics for each application. Create a DataFrame to store these metrics. Print the resulting DataFrame.", "output": "import pandas as pd\ndf = pd.read_csv(\"5G_data/ue-lte-network-traffic-stats.csv\")\napplication_columns = [col for col in df.columns if 'web-rtc' in col or 'sipp' in col or 'web-server' in col]\ndef calculate_metrics(df, column):\n    max_traffic = df[column].max()\n    traffic_std = df[column].std()\n    high_traffic_threshold = df[column].mean() + traffic_std\n    high_traffic_count = df[df[column] > high_traffic_threshold].shape[0]\n    percentiles = df[column].quantile([0.25, 0.5, 0.75]).to_list()\n    return max_traffic, traffic_std, high_traffic_count, percentiles\nmetrics = {col: calculate_metrics(df, col) for col in application_columns}\nuser_behavior_df = pd.DataFrame({\n    'Application': application_columns,\n    'Average_Traffic': [df[col].mean() for col in application_columns],\n    'Max_Traffic': [metrics[col][0] for col in application_columns],\n    'Traffic_Std_Dev': [metrics[col][1] for col in application_columns],\n    'High_Traffic_Instances': [metrics[col][2] for col in application_columns],\n    '25th_Percentile': [metrics[col][3][0] for col in application_columns],\n    'Median': [metrics[col][3][1] for col in application_columns],\n    '75th_Percentile': [metrics[col][3][2] for col in application_columns]\n})\nprint(user_behavior_df)"}]}
{"id": "seed_task_23", "name": "5G QoS Metrics Analysis", "instruction": "Write Python code to load a a CSV file 'data.csv', define the QoS metrics to analyze (Jitter, CQI, Throughput), calculate the average and standard deviation for each metric, and create bar plots with error bars for each metric to visualize the results.", "instances": [{"input": "Load the dataset. Define the QoS metrics to analyze (Jitter, CQI, Throughput). Calculate the average and standard deviation for each metric. Create bar plots with error bars for each metric to visualize the results.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv(\"5G_data/ue-lte-network-traffic-stats.csv\")\njitter_columns = [col for col in df.columns if 'Jitter' in col]\ncqi_columns = [col for col in df.columns if 'CQI' in col]\nthroughput_columns = [col for col in df.columns if 'web-rtc' in col or 'sipp' in col or 'web-server' in col]\ndef calculate_avg_std(df, columns):\n    avg_std = {}\n    for col in columns:\n        avg_std[col] = {\n            'Average': df[col].mean(),\n            'Std_Dev': df[col].std()\n        }\n    return avg_std\navg_std_jitter = calculate_avg_std(df, jitter_columns)\navg_std_cqi = calculate_avg_std(df, cqi_columns)\navg_std_throughput = calculate_avg_std(df, throughput_columns)\n# Plotting the results\nplt.figure(figsize=(10, 6))\n\n# Define a function to plot metrics\n\ndef plot_metrics(avg_std_dict, title, ylabel):\n    fig, ax = plt.subplots(figsize=(10, 6))\n    metrics = avg_std_dict.keys()\n    averages = [avg_std_dict[metric]['Average'] for metric in metrics]\n    errors = [avg_std_dict[metric]['Std_Dev'] for metric in metrics]\n\n    ax.bar(metrics, averages, yerr=errors, align='center', alpha=0.7, ecolor='black', capsize=10)\n    ax.set_ylabel(ylabel)\n    ax.set_title(title)\n    ax.yaxis.grid(True)\n\n    plt.tight_layout()\n    plt.show()\n\n# Plotting Jitter, CQI, and Throughput metrics\nplot_metrics(avg_std_jitter, 'Average Jitter with Standard Deviation', 'Jitter (ms)')\nplot_metrics(avg_std_cqi, 'Average CQI with Standard Deviation', 'CQI')\nplot_metrics(avg_std_throughput, 'Average Throughput with Standard Deviation', 'Throughput')"}]}
{"id": "seed_task_24", "name": "5G QoS Metrics Calculation", "instruction": "Load the dataset from a CSV file 'data.csv'. Define the QoS metrics to analyze (Jitter, CQI, Throughput) using dynamic column selection. Calculate the average and standard deviation for each metric. Create bar plots with error bars for each metric to visualize the results.", "instances": [{"input": "Load the dataset. Define the QoS metrics to analyze (Jitter, CQI, Throughput) using dynamic column selection. Calculate the average and standard deviation for each metric. Create bar plots with error bars for each metric to visualize the results.", "output": "import pandas as pd\nimport matplotlib.pyplot as plt\ndf = pd.read_csv(\"5G_data/ue-lte-network-traffic-stats.csv\")\njitter_columns = [col for col in df.columns if 'Jitter' in col]\ncqi_columns = [col for col in df.columns if 'CQI' in col]\nthroughput_columns = [col for col in df.columns if 'web-rtc' in col or 'sipp' in col or 'web-server' in col]\ndef calculate_avg_std(df, columns):\n    avg_std = {}\n    for col in columns:\n        avg_std[col] = {'Average': df[col].mean(), 'Std_Dev': df[col].std()}\n    return avg_std\navg_std_jitter = calculate_avg_std(df, jitter_columns)\navg_std_cqi = calculate_avg_std(df, cqi_columns)\navg_std_throughput = calculate_avg_std(df, throughput_columns)\n# Plotting the results\nplt.figure(figsize=(10, 6))\n\ndef plot_metrics(avg_std_dict, title, ylabel):\n    fig, ax = plt.subplots(figsize=(10, 6))\n    metrics = avg_std_dict.keys()\n    averages = [avg_std_dict[metric]['Average'] for metric in metrics]\n    errors = [avg_std_dict[metric]['Std_Dev'] for metric in metrics]\n\n    ax.bar(metrics, averages, yerr=errors, align='center', alpha=0.7, ecolor='black', capsize=10)\n    ax.set_ylabel(ylabel)\n    ax.set_title(title)\n    ax.yaxis.grid(True)\n\n    plt.tight_layout()\n    plt.show()\n\n# Plotting Jitter, CQI, and Throughput metrics\nplot_metrics(avg_std_jitter, 'Average Jitter with Standard Deviation', 'Jitter (ms)')\nplot_metrics(avg_std_cqi, 'Average CQI with Standard Deviation', 'CQI')\nplot_metrics(avg_std_throughput, 'Average Throughput with Standard Deviation', 'Throughput')"}]}
